
 const std = @import("std");
 const zant = @import("zant");
 const Tensor = zant.core.tensor.Tensor;
 const pkgAllocator = zant.utils.allocator;
 const allocator = pkgAllocator.allocator;


 // ---------------------------------------------------
 // +         Initializing Weights and Biases         +
 // ---------------------------------------------------

 // ----------- Initializing tensor_const_fold_opt__190_scale;

const shape_tensor_const_fold_opt__190_scale : [1]usize = [_]usize{ 16} ;
const array_const_fold_opt__190_scale : [16]f32 linksection(".rodata") = [_]f32{ 4.209852e-3, 9.2616575e-3, 7.4990564e-3, 7.1081105e-3, 5.0588924e-2, 3.847415e-2, 6.8666423e-3, 4.3506775e-2, 1.4442419e-2, 5.1366728e-2, 9.414206e-3, 8.918441e-3, 4.4512763e-3, 1.5728848e-2, 9.109393e-3, 2.1109253e-2} ;
pub const tensor_const_fold_opt__190_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__190_scale, &shape_tensor_const_fold_opt__190_scale);

 // ----------- Initializing tensor_const_fold_opt__197_scale;

const shape_tensor_const_fold_opt__197_scale : [1]usize = [_]usize{ 96} ;
const array_const_fold_opt__197_scale : [96]f32 linksection(".rodata") = [_]f32{ 2.1492352e-3, 1.663771e-3, 3.3722613e-3, 3.1113618e-3, 1.4756245e-3, 1.6528685e-3, 1.9197818e-3, 2.387644e-3, 2.105955e-3, 1.0400767e-3, 3.7011357e-3, 2.0588157e-3, 1.9364911e-3, 2.724505e-3, 2.9382196e-3, 2.181139e-3, 3.0290321e-3, 1.8057964e-3, 1.7151835e-3, 1.7898162e-3, 2.025432e-3, 1.3786928e-3, 1.3350212e-3, 2.0485162e-3, 2.289061e-3, 2.7995193e-3, 7.956888e-4, 1.9291375e-3, 2.594211e-3, 2.136279e-3, 1.5326455e-3, 2.2057814e-3, 1.5573611e-3, 3.7589045e-3, 2.7572245e-3, 2.6677782e-3, 2.5563336e-3, 1.8959241e-3, 1.9494097e-3, 2.740531e-3, 2.925654e-3, 2.8988488e-3, 2.7113312e-3, 3.1919547e-3, 3.8339626e-3, 2.4999452e-3, 2.2600123e-3, 2.4419914e-3, 2.1003564e-3, 2.9110115e-3, 2.072901e-3, 3.1566108e-3, 2.451807e-3, 2.1633685e-3, 4.5953686e-3, 2.5813028e-3, 2.5128298e-3, 1.8234449e-3, 2.1396084e-3, 3.4075575e-3, 2.8373613e-3, 1.8413793e-3, 2.454073e-3, 1.9930294e-3, 2.6372962e-3, 1.5161248e-3, 1.679712e-3, 3.0143172e-3, 1.7356495e-3, 4.3169865e-3, 1.7208835e-3, 2.1280502e-3, 1.8350162e-3, 2.7721473e-3, 2.2512192e-3, 1.6668326e-3, 2.1702768e-3, 3.0339947e-3, 2.1466168e-3, 1.5902123e-3, 2.1296511e-3, 1.8742919e-3, 1.4211448e-3, 1.9771764e-3, 1.8768453e-3, 3.0836058e-3, 1.8876719e-3, 2.907696e-3, 6.1079505e-4, 2.9158287e-3, 3.4757669e-3, 2.9044629e-3, 1.3468348e-3, 2.3310017e-3, 3.3238307e-3, 2.0162975e-3} ;
pub const tensor_const_fold_opt__197_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__197_scale, &shape_tensor_const_fold_opt__197_scale);

 // ----------- Initializing tensor_const_fold_opt__203_quantized;

const shape_tensor_const_fold_opt__203_quantized : [4]usize = [_]usize{ 96, 1, 1, 16} ;
const array_const_fold_opt__203_quantized : [1536]i8 linksection(".rodata") = [_]i8{ 27, 6, -15, 49, -127, -10, 91, 50, 48, 63, -10, 18, 14, 1, 32, 95, -34, 23, -88, -2, 116, 127, -5, -26, -9, 20, -73, 18, -77, 79, -58, -59, -52, 70, 84, -9, 59, 92, 15, 36, 29, -16, 38, -31, 66, -127, -8, 22, 127, -25, 15, 0, 44, 47, -20, -5, 40, 42, -62, -31, -40, 48, -47, 61, -64, -18, 4, 29, -122, -14, -77, -31, -3, 16, -11, -41, -17, 45, -34, 127, -127, 2, 50, 14, 107, 22, 23, 18, -64, -1, -36, 7, -88, 72, -77, -29, -127, 14, -34, 39, -26, -90, 90, 18, -4, -42, -40, 51, 19, -2, -54, 3, -32, 127, 18, -98, 91, 102, 127, 34, 53, -10, 32, 34, 93, 35, -29, 36, -44, -34, -64, 43, -38, 86, -39, -71, 37, -19, 69, 47, 127, 76, -127, 16, -12, -127, -11, 71, -31, -64, -17, 54, 45, 47, -3, 59, -62, 11, 0, -40, -48, -45, -86, 63, -62, 100, 53, -65, 38, -23, 35, -35, 39, 127, -60, 83, -49, -77, -52, 30, -6, 59, 34, 30, 16, 24, 72, -69, 17, 117, -84, 127, -38, -97, -93, 85, -118, -127, 19, 90, 80, 64, -35, 96, 4, -68, -15, -5, -68, -12, -31, -7, -21, 9, 32, 17, -24, 127, -2, -27, 39, 36, 16, -10, -84, -5, -36, -29, 17, 60, -48, -100, 127, -24, 72, 28, 66, -22, -66, -71, 3, -127, 96, -53, -38, -43, 6, 59, 15, -47, -107, -30, 86, -34, -27, -47, -14, -38, 19, -30, 28, 27, -24, -24, 59, -127, 37, -13, -4, -10, -71, -82, -17, -7, 38, -56, 22, -21, -35, 15, 112, -52, 19, 72, 95, -52, -14, -127, 69, 12, -9, -104, -4, -32, 111, -51, 28, 55, -22, 60, -4, 60, -13, -127, -58, -49, -26, -74, -67, 51, -13, -29, 29, -29, 4, -127, -2, -17, -27, -24, 7, 63, 80, -94, 52, -11, -31, 90, -117, -127, 30, -86, -31, 105, -24, -15, 6, -122, -127, -31, 82, 49, 120, 51, -88, -98, -20, -10, 120, -113, -25, 29, 75, -13, 83, -15, 13, -8, 52, 22, 37, 127, 25, 20, 7, -9, 105, -11, -127, -67, -8, 52, 54, 48, 31, -7, -21, 0, -9, -112, 19, 57, 64, 125, -4, 4, 4, 52, 6, -90, -10, -55, 9, 116, -127, 54, -6, -70, 60, -68, 81, -33, 71, 127, 22, 1, -32, 34, -123, 60, 62, -64, -25, 21, 75, 11, -12, 13, 13, 51, -45, 107, -25, 36, -52, -28, -75, 38, 3, 19, 39, -127, 48, 7, 1, -39, -52, -7, -95, 11, -109, -19, -71, -36, -93, 55, -10, 127, -62, 9, 22, -7, 5, -22, -127, 18, -27, -32, 1, -19, 7, -65, -52, -28, -14, -122, -26, 98, -27, 10, 127, 0, 80, 55, -112, 66, 41, -37, -50, 72, 29, -70, -28, -3, -127, 6, 46, -45, 21, 22, -30, -43, -14, 30, -2, 45, -127, -27, -17, 74, -24, 20, -48, -31, -21, -45, -4, -40, -34, -71, -31, 73, -127, -88, -91, -17, -90, -43, 19, -42, 116, 48, -47, -49, 42, 44, 32, 3, -10, 24, -96, 27, -119, -64, 48, -19, -127, 10, -50, -68, 1, 76, 47, 68, 32, 67, -23, 22, -77, -40, 52, 15, 16, -127, -21, 27, -26, -10, 53, 112, 54, -45, -69, 0, -127, 0, 59, -32, 22, 40, -20, 3, 28, 66, 57, 86, -16, -4, -67, 42, 127, -16, 61, 76, -97, 11, -96, -109, 29, -32, 36, 58, -127, 64, 2, -80, 23, -102, -37, -23, -26, -31, -20, 37, 69, -86, 15, -117, 26, 124, 19, -55, -80, -67, -127, -65, -50, -73, 59, 69, -82, -85, 88, 2, 19, -39, 16, 86, 1, 63, 70, -41, -24, 48, 24, -5, 0, 127, 60, 100, 114, 36, 56, 109, -46, -36, 29, 52, -82, 51, 12, -31, -46, -12, 127, -12, -26, -6, 12, 48, -110, 118, -3, 57, -58, 24, -102, 6, 16, 33, 55, -127, 23, -127, 53, -6, 108, -3, 49, 6, -22, -80, -110, -21, -16, -1, -1, 9, -30, -69, -29, 4, 127, 18, 0, 64, -67, -42, -121, -74, 127, 6, -50, 72, -26, -58, -86, -104, 21, 94, 58, 17, -24, -127, -66, 70, -67, 12, 18, 82, 17, -56, -74, 13, -127, 50, -33, -51, 65, -55, 17, -54, -10, 18, -16, 52, 13, -78, -35, -27, 108, -54, 6, 99, -14, -14, 25, 54, -38, -40, 40, -127, -64, -47, -28, 89, 4, 16, 24, 61, -5, 127, 85, 78, -71, 53, -16, 91, 43, -15, -73, -81, 38, -67, -1, 54, 48, -68, -6, 29, -61, 10, -41, -127, 41, 58, 0, 19, -24, -16, 102, 70, -61, 127, -69, 9, -43, -18, 108, 125, -9, -8, 1, -7, -127, -2, -10, -38, 57, 13, 34, 40, -30, -64, 5, 3, 17, 0, -23, -127, -28, 112, 79, -73, -4, 17, 30, -72, 77, 91, -49, 17, 23, -14, 0, -86, 87, -104, -7, -30, 29, 2, 127, -48, 41, 5, -39, 97, -77, -56, 16, -61, -25, -85, 38, -119, -22, 92, -127, 46, -27, -26, 0, -50, 44, 61, 17, -29, -127, -36, -48, -91, -17, -19, 35, 40, -45, -50, 72, 25, 14, 7, -19, 68, -27, 19, 42, -22, 0, 127, 13, 61, 13, 14, -3, 38, 29, -127, -89, 40, -98, 57, 20, 12, 118, -16, 5, 24, -30, -32, 58, 118, 63, 51, 65, -101, 89, -2, -4, -4, 75, -42, 19, 125, 74, -83, 127, -73, 108, -109, 34, -72, 51, 8, 13, 127, 91, 119, -5, 71, 75, 19, 90, -12, -48, 60, 30, -42, -5, -106, -1, 9, -15, 12, -127, -118, -115, -59, 94, -5, 21, -32, 21, 27, 21, -26, -1, -37, 6, 127, -23, 49, -15, -13, -29, -19, 66, 72, 8, -31, -74, -127, -32, -52, -24, -9, -29, 20, -47, -20, 89, 87, -16, 91, -38, 34, -46, 127, -42, 15, -47, 13, -46, 26, -30, 44, 58, -79, 33, -3, -75, -127, -7, -37, 63, -21, 2, -88, -21, 36, -25, 51, 30, -30, -44, 17, 6, -32, 56, -73, 24, 111, -127, -13, -85, -53, -62, 74, 69, 49, -52, -7, -60, -40, 66, 71, -14, -66, -108, -62, 17, -31, -118, 127, -55, 55, -20, 54, -20, 20, -48, 127, -8, 29, -62, 9, -32, 33, -29, 47, 44, -72, -1, -22, -34, -29, 20, -69, 67, -87, -14, 25, 3, 127, -34, -2, -23, -80, 42, -127, -2, 117, -4, -14, -6, 104, 91, 72, 77, 45, -91, 66, 1, -11, 19, 70, 78, -123, 77, 11, -28, 127, 26, 110, 52, 84, 83, -103, 23, -126, 59, 41, 40, -37, 109, 10, -127, -64, -127, -92, 1, 50, -29, 47, -123, -14, -41, -68, 26, -61, 38, -6, 30, 21, -104, 59, -127, -58, 18, 70, -15, 48, -22, 27, 58, -43, -61, -16, -90, -107, -1, 65, -54, 2, 29, 86, -127, 23, 1, -35, -31, -55, 42, -104, 46, -74, 93, 92, 91, -24, 34, -32, -100, 127, -2, -5, -26, 74, -66, -4, 92, 18, 59, 56, 17, 100, 127, 33, -60, 20, -29, 27, -35, 28, -45, 127, -8, 10, -50, 29, -47, 39, -12, 43, 28, -67, -44, 70, -46, 39, -71, -4, -19, 12, 50, 54, -45, -35, 51, -45, -127, 14, 103, 99, -127, 90, 85, 95, 84, 60, 42, 8, 86, -28, 71, 43, 52, 28, 8, -53, -7, -79, 62, -118, 39, -49, 39, 41, 122, -36, 14, -28, -42, 127, -35, 53, 2, 18, -5, -38, -26, -10, -127, -11, 35, 9, 104, 30, -83, -42, -99, 23, 68, -1, 68, 63, -9, -127, -104, 52, -70, -74, 4, -116, 28, 74, 65, 90, -25, -14, 24, -8, 86, 79, -116, 115, -54, -44, -29, 43, 93, 127, 66, 108, -48, -33, -19, -55, 72, -97, 13, 13, -43, 53, 127, -53, 64, -84, 1, -11, 29, 23, -9, 28, -9, -127, 53, -38, 98, 22, 55, -53, -56, -108, -127, -94, -39, -25, -1, 96, 98, 6, 76, 61, 90, 89, 60, 98, -66, 14, 113, 12, 82, -47, 55, -18, -9, 98, 26, 72, -51, 10, -51, 41, 127, 3, -75, 84, -21, -1, 35, 81, 16, 21, 115, 48, 127, -14, -43, 82, 19, -27, 6, -66, 15, -52, 51, -127, 32, -32, 41, -14, 75, -44, 42, -46, -55, 84, -66, 58, 53, -11, 97, -26, 46, -13, -53, -64, 81, -44, 84, 127, 98, -108, -23, 37, -9, 26, -34, 127, -12, 34, -43, 13, -26, 23, -6, 62, 26, -86, 48, -83, 25, 1, 107, 16, 74, 41, -13, -127, -109, -38, -7, -7, -55, 38, -24, 38, -35, -54, 4, -55, -77, 27, -91, 2, -119, -127, -95, -69, -12, 39, 68, 54, 60, 41, -127, -103, 8, -8, -16, 39, -20, -40, -12, -87, 13, -6, -14, -127, -89, 25, -87, -76, -14, 125, 71, 52, -14, 48, -65, 30, 18, -49, 97, 14, 112, 6, 6, -44, 16, 37, -6, 47, -9, 24, 13, -10, 127, -4, -52, -37, -39, -21, 127, 6, 33, 69, -32, -13, -81, -60, 8, 9, -45, 44} ;
pub const tensor_const_fold_opt__203_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__203_quantized, &shape_tensor_const_fold_opt__203_quantized);

 // ----------- Initializing tensor_model_1_block_1_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_block_1_project_conv2d_quantized;

const shape_tensor_model_1_block_1_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_block_1_project_conv2d_quantized : [1]usize = [_]usize{ 8} ;
const array_model_1_block_1_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_block_1_project_conv2d_quantized : [8]i32 linksection(".rodata") = [_]i32{ 8081, 17608, -4495, 7347, -1726, 2071, -11795, -18788} ;
pub const tensor_model_1_block_1_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_block_1_project_conv2d_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_model_1_block_1_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_block_1_project_conv2d_quantized, &shape_tensor_model_1_block_1_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_block_1_project_conv2d_quantized);

 // ----------- Initializing tensor_const_fold_opt__193_zero_point;

const shape_tensor_const_fold_opt__193_zero_point : [1]usize = [_]usize{ 8} ;
const array_const_fold_opt__193_zero_point : [8]i8 linksection(".rodata") = [_]i8{ 0, 0, 0, 0, 0, 0, 0, 0} ;
pub const tensor_const_fold_opt__193_zero_point = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__193_zero_point, &shape_tensor_const_fold_opt__193_zero_point);

 // ----------- Initializing tensor_model_1_block_2_expand_bn_fusedbatchnormv3_quantized;

const shape_tensor_model_1_block_2_expand_bn_fusedbatchnormv3_quantized : [1]usize = [_]usize{ 48} ;
const array_model_1_block_2_expand_bn_fusedbatchnormv3_quantized : [48]i32 linksection(".rodata") = [_]i32{ 1878, 4459, 11709, 1324, 1929, -1239, 4561, 11946, 3134, -410, 3659, -2159, 17250, -1330, 1527, 22464, -437, 1231, 117, 2151, 2932, 3067, 376, 23575, 4238, 3510, 15943, 1435, 5559, 5049, 540, 899, 707, 1807, -298, 247, -2323, -373, 2767, 1621, 4297, 2123, 3405, 3349, 4983, 2760, 1620, 4470} ;
pub const tensor_model_1_block_2_expand_bn_fusedbatchnormv3_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_model_1_block_2_expand_bn_fusedbatchnormv3_quantized, &shape_tensor_model_1_block_2_expand_bn_fusedbatchnormv3_quantized);

 // ----------- Initializing tensor_const_fold_opt__190_quantized;

const shape_tensor_const_fold_opt__190_quantized : [4]usize = [_]usize{ 16, 3, 3, 1} ;
const array_const_fold_opt__190_quantized : [144]i8 linksection(".rodata") = [_]i8{ 5, 8, 4, 9, -127, 15, -1, 23, 1, -6, -9, 0, -10, 127, -11, -3, -26, -1, 13, 8, 2, 0, 127, -7, -1, -5, -3, 4, 2, 2, 2, -2, 0, -20, -127, -8, -18, 14, 1, 127, -86, -11, -17, 7, 0, 11, -2, -14, -25, -92, 127, 15, -16, -5, 13, 13, -4, -127, -14, 5, 59, -4, 2, 16, -26, 11, -21, -101, -10, 7, 127, -2, -2, -7, 6, 127, 18, 2, -10, -3, 4, -12, 9, 1, 127, -106, -13, -8, 1, 2, 1, -5, -2, 3, 127, -2, -3, -2, -2, -2, 85, -6, -5, 127, -6, 1, -14, -3, -9, -13, 1, 113, 127, 10, -3, -11, 1, -8, 20, -5, -27, 127, -6, -1, -61, -7, 5, -2, -1, 1, 127, -11, -6, -11, -11, 0, 2, 2, -18, 127, -6, -12, -36, -10} ;
pub const tensor_const_fold_opt__190_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__190_quantized, &shape_tensor_const_fold_opt__190_quantized);

 // ----------- Initializing tensor_const_fold_opt__169_quantized;

const shape_tensor_const_fold_opt__169_quantized : [4]usize = [_]usize{ 8, 1, 1, 48} ;
const array_const_fold_opt__169_quantized : [384]i8 linksection(".rodata") = [_]i8{ -44, -41, -29, -63, 0, -8, 80, 65, -93, -83, -32, -2, -58, 4, -58, 34, -79, 10, 17, 127, 54, -31, 21, 79, 52, 70, 10, 5, -90, -61, -88, -59, -58, 97, 36, -48, 21, -29, 82, -4, 34, -4, 0, -109, 30, -37, -26, -90, -22, 61, -29, -32, -74, 56, -27, -50, -41, 84, -18, 16, 46, 41, -54, -10, -12, -118, 76, -57, 127, 10, -53, 25, 55, -7, -89, 73, 37, -18, 67, 32, -31, -11, -2, -19, -2, 109, -19, -32, 63, 47, -11, 7, 90, 17, -24, 50, -25, -34, 112, 8, 92, -47, -13, 18, -31, 11, -11, 50, 8, -54, -48, -127, -54, -98, -31, 13, -102, 37, -43, -39, -54, 17, 1, -41, -45, 6, -36, -8, 0, 2, 29, -10, 24, -38, -49, 2, 38, -28, 26, -45, -46, -50, -63, -56, 31, 24, 63, -4, 11, -44, 22, 75, -53, -19, 42, -21, -78, 43, -20, 41, 64, 37, -33, 23, -102, -67, 127, 4, 3, 1, -71, -24, -45, 58, 103, -70, 8, -100, -27, 36, -16, -70, -15, 63, -86, -63, 64, -13, -98, -70, 65, -13, 19, -12, 78, -34, 10, -12, -6, -2, -54, -6, -20, 11, 48, -76, 40, -95, 42, 50, -5, -39, 16, 31, 17, 11, 2, 4, 46, -17, 32, 25, -127, -19, -28, -18, 6, 14, 52, -3, 33, 8, -39, -13, -68, 22, -14, -97, 6, 25, 26, -54, 64, 20, 25, 26, 32, 5, -79, -12, -48, 31, 33, 7, 22, -47, 93, 73, -11, -9, 80, -63, 127, -91, -14, 52, 10, 38, 9, 23, -31, -36, -18, -48, -40, 10, 46, 18, 72, 1, -99, 31, 36, 39, 57, -19, 71, 1, -33, 39, -127, 80, 36, 27, 41, 27, -23, -10, 49, -59, -85, -13, -24, 25, -100, 20, -13, 96, 9, 42, -78, -84, -5, -11, 26, 65, -35, -41, -48, 10, 39, 68, -46, -32, -7, -15, 87, 6, 61, 54, -110, -41, -38, 107, -46, -30, 41, 62, -86, 21, 20, 59, 123, 79, 49, 77, -93, -1, -31, -14, -66, -39, 29, 42, 115, 99, 84, 11, 127, 27, 104, 115, -42, 104, -78, 40, -3, -68, 27, -70, -20, 31, 3, 96, -65, 72, -58, 58, -5, -78, 89, -14, 38, -27} ;
pub const tensor_const_fold_opt__169_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__169_quantized, &shape_tensor_const_fold_opt__169_quantized);

 // ----------- Initializing tensor_model_1_block_1_depthwise_relu_relu6_model_1_block_1_depthwise_bn_fusedbatchnormv3_model_1_block_3_depthwise_bn_fusedbatchnormv3_model_1_block_3_depthwise_depthwise_model_1_block_1_depthwise_depthwise_zero_point;

const shape_tensor_model_1_block_1_depthwise_relu_relu6_model_1_block_1_depthwise_bn_fusedbatchnormv3_model_1_block_3_depthwise_bn_fusedbatchnormv3_model_1_block_3_depthwise_depthwise_model_1_block_1_depthwise_depthwise_zero_point : [1]usize = [_]usize{ 1} ;
const array_model_1_block_1_depthwise_relu_relu6_model_1_block_1_depthwise_bn_fusedbatchnormv3_model_1_block_3_depthwise_bn_fusedbatchnormv3_model_1_block_3_depthwise_depthwise_model_1_block_1_depthwise_depthwise_zero_point : [1]u8 linksection(".rodata") = [_]u8{ 118} ;
pub const tensor_model_1_block_1_depthwise_relu_relu6_model_1_block_1_depthwise_bn_fusedbatchnormv3_model_1_block_3_depthwise_bn_fusedbatchnormv3_model_1_block_3_depthwise_depthwise_model_1_block_1_depthwise_depthwise_zero_point = Tensor(u8).fromConstBuffer(&allocator, &array_model_1_block_1_depthwise_relu_relu6_model_1_block_1_depthwise_bn_fusedbatchnormv3_model_1_block_3_depthwise_bn_fusedbatchnormv3_model_1_block_3_depthwise_depthwise_model_1_block_1_depthwise_depthwise_zero_point, &shape_tensor_model_1_block_1_depthwise_relu_relu6_model_1_block_1_depthwise_bn_fusedbatchnormv3_model_1_block_3_depthwise_bn_fusedbatchnormv3_model_1_block_3_depthwise_depthwise_model_1_block_1_depthwise_depthwise_zero_point);

 // ----------- Initializing tensor_const_fold_opt__176_scale;

const shape_tensor_const_fold_opt__176_scale : [1]usize = [_]usize{ 8} ;
const array_const_fold_opt__176_scale : [8]f32 linksection(".rodata") = [_]f32{ 9.489531e-3, 4.599307e-3, 6.197929e-3, 6.0695526e-3, 7.294107e-3, 5.8591478e-3, 9.409511e-3, 5.561667e-3} ;
pub const tensor_const_fold_opt__176_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__176_scale, &shape_tensor_const_fold_opt__176_scale);

 // ----------- Initializing tensor_model_1_expanded_conv_depthwise_bn_fusedbatchnormv3_quantized;

const shape_tensor_model_1_expanded_conv_depthwise_bn_fusedbatchnormv3_quantized : [1]usize = [_]usize{ 16} ;
const array_model_1_expanded_conv_depthwise_bn_fusedbatchnormv3_quantized : [16]i32 linksection(".rodata") = [_]i32{ 23349, -569, -158, 3207, -884, 422, 9406, 1102, -1352, 301, -2346, 3082, 625, -420, -337, -1298} ;
pub const tensor_model_1_expanded_conv_depthwise_bn_fusedbatchnormv3_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_model_1_expanded_conv_depthwise_bn_fusedbatchnormv3_quantized, &shape_tensor_model_1_expanded_conv_depthwise_bn_fusedbatchnormv3_quantized);

 // ----------- Initializing tensor_const_fold_opt__197_quantized;

const shape_tensor_const_fold_opt__197_quantized : [4]usize = [_]usize{ 96, 1, 1, 16} ;
const array_const_fold_opt__197_quantized : [1536]i8 linksection(".rodata") = [_]i8{ -41, 14, -29, -48, -19, -48, -58, -55, 69, -60, 6, -29, 64, -127, 5, -70, -72, 88, -106, -124, -56, 43, -7, 51, -2, 6, 105, -35, 47, 127, 38, 30, -67, 6, -99, 9, 5, -51, 6, -48, -127, 79, 81, 16, 66, 35, -64, 96, -43, -48, 21, -38, -70, -1, -49, -127, -2, 16, 26, -67, -69, -44, -113, -41, 97, 8, 7, 27, -63, -22, -127, 6, 5, 65, -3, 41, 20, 30, -56, -52, -82, 33, -105, -61, 31, -64, -26, -86, 66, -37, 8, -19, -7, -127, -99, -46, -15, -25, -36, 30, -84, 77, 50, -37, -11, -30, 117, -37, 13, 15, -127, 1, -29, 95, 127, -84, 78, 61, -4, -47, 25, 71, -92, -24, 47, 12, 34, 69, -75, -6, 21, -13, 42, 54, 127, 103, -44, -28, -53, -102, 27, 53, -56, -45, 39, 67, 90, 5, -127, -1, -111, -125, 25, 14, 112, 31, -39, -76, 73, -50, -35, -115, 20, -79, -107, 43, 27, 24, -27, -40, -8, 40, -34, 67, -127, -7, 96, -39, -17, 85, -73, -2, 72, -12, 127, 122, -35, 42, 29, -65, -13, 99, -68, -77, 127, -22, 84, -46, -15, 78, 57, -14, 90, 114, -53, 17, -110, 48, -11, -38, 12, 22, 18, 7, 127, 31, -80, 18, 10, 4, -20, 109, 79, -52, 127, -97, 103, -12, 84, 60, 96, 85, 60, 57, 68, 30, 59, -29, 30, -43, -10, 108, 5, -40, 54, 127, -76, 48, -39, -10, -36, -11, -46, 122, -30, -48, -27, 78, 127, -27, 14, 70, -3, -33, 0, 10, -12, 67, 59, -24, 91, 119, 2, 49, 24, -127, 17, -43, -7, -80, -70, 60, -30, 74, -65, -31, 76, -12, -90, 20, -79, -99, 119, 109, -67, -76, 28, 87, 127, 67, 0, 112, -54, -18, 57, 127, 66, 39, 35, -15, -4, -14, -26, 110, 48, 121, 42, 59, -52, 51, 114, 26, 38, 76, -74, -34, -36, 65, -48, -44, -127, -24, 78, -46, 50, -31, -62, -64, -28, 105, -13, 27, -127, 32, -2, 14, 13, 17, 5, 30, -67, -9, -5, -5, -39, -53, 127, 5, -24, 55, 37, 74, 24, 43, -17, 25, -2, 16, -73, 36, -34, 17, 27, 99, 126, 107, -39, 127, -15, -29, 3, 39, -67, -32, 24, -66, 19, -1, 127, 41, 87, -19, 29, 1, 30, 10, -61, 29, 13, -10, 127, -77, 93, 26, 22, -21, -24, 120, 117, -26, -75, -6, 125, -57, 94, 26, 56, 26, 118, 90, 61, -8, -70, -24, 4, 73, -2, 127, 23, -72, 21, -75, -81, 33, -57, 22, -45, 103, 47, -119, 94, -71, 121, 12, 36, -68, 111, 127, -47, 38, -101, -102, 44, -66, 5, -45, -117, 127, -40, 47, -16, 69, -36, 69, 96, 78, -56, 53, 7, 58, -54, -19, 46, 20, 14, 65, -127, -3, -15, 69, -16, 87, -105, -53, 76, -33, 20, 12, -47, 49, -73, -11, 18, 49, -6, 127, 33, -118, 73, 40, 78, -57, -93, 44, -5, 10, 32, -31, -83, 73, 27, 127, -41, 58, 14, 37, -98, 67, 45, 27, 59, -127, 14, -69, 11, 30, 38, 31, -70, -16, 38, 77, -7, 18, -40, 1, -38, -60, 15, -18, 2, -14, -4, 127, -14, 25, -73, -80, 43, -12, -2, 56, 21, -5, -4, -19, -36, -22, -27, 127, 40, -14, 7, -35, -1, 25, -56, -18, -5, -127, -58, -8, 4, -37, 22, -6, -23, 6, -127, -22, 45, 107, -4, 50, -37, -1, 41, 23, -6, 31, -37, 52, 33, 34, 66, -90, 39, -127, 64, -26, -95, 72, -85, -39, 10, 15, 97, 68, -61, 127, 36, -47, 42, 32, 92, -92, 40, -2, -119, 27, -55, -115, -114, 21, 107, 30, -98, -116, -19, -52, -8, -66, 7, 12, 2, -16, 53, 4, -127, -89, -43, 5, -73, -83, -74, -15, 3, -127, 12, 9, 12, -59, 45, 72, 36, 61, -39, -91, -10, 127, -11, -31, -58, -19, -5, -45, 56, -58, -53, -16, 5, 33, -37, 63, -32, -127, 32, 0, 17, -12, 46, 9, -49, 8, 82, -13, -3, 29, 6, 65, -19, 11, 127, 48, 33, -8, -10, 16, -5, -70, -91, -47, -34, 5, 101, -10, 33, 41, -33, -10, -1, 30, 33, -56, 19, 21, 127, -17, -30, -27, 13, -78, -51, 52, -20, -93, 26, 45, 52, 1, -2, 31, -102, 127, 30, -36, -19, -96, 67, 80, -23, -41, -101, 33, 5, -47, 10, -11, 50, 66, 69, 127, -38, -55, 10, 59, -4, 3, 57, 25, 1, -71, -127, -45, 46, -20, -53, 21, -52, 85, -9, -35, -1, 70, -14, -114, 10, -34, 9, -33, 45, -127, -32, -10, -64, -2, 41, -26, 1, -7, 102, 127, -25, -19, -20, 8, -33, 27, -46, 26, 54, 28, -91, 34, 27, -127, -37, 4, -84, 47, -40, 0, 19, -88, -94, -34, -92, 35, -42, 119, -6, 33, -44, -68, -49, -82, -6, -59, 23, 46, -47, 127, -127, 0, 28, -15, 5, 33, 63, -2, 42, -72, -27, -35, -109, -67, -113, 6, -51, -53, -56, -127, -35, 15, 11, 58, 53, -48, -43, 6, -22, 45, 59, 97, 11, -30, 4, -10, -56, 62, 75, -22, -8, -84, 45, 7, -27, -20, -127, 47, -18, -45, -32, 43, 84, -43, 32, 100, -74, -48, -127, -31, 57, -18, -30, 29, 67, -39, -66, -47, -108, 41, -127, 4, -6, -19, -40, -4, 109, -15, 27, 9, -63, 4, 13, -55, 127, 54, 60, 68, -31, 65, 14, -23, -62, 83, -118, -30, 22, 2, 15, -24, 33, -20, -39, -53, 32, -127, -66, 3, -59, -38, -41, 50, -80, -27, -28, -9, 11, 55, -63, -7, 52, 127, -74, -11, -25, 9, 10, 28, 11, -46, 11, 20, -127, -37, 49, 4, 8, 39, -13, 48, -4, -47, 41, 45, 30, 23, -65, -8, -18, -17, -127, -80, -38, 8, 22, 92, 73, -20, 68, 40, 62, -12, 58, -13, -26, 41, 36, 118, -63, 118, 17, 82, 67, 59, 49, 127, 4, -108, -24, -18, -55, 25, 54, -15, -4, -13, 5, -28, -28, 127, 106, 29, 8, -36, -127, -32, 11, 71, 17, -19, -21, -110, 15, 25, 50, -54, -39, 106, -19, -22, 78, 37, 77, -27, 86, 57, -32, -2, -127, -70, 16, 78, -63, -4, -56, -86, 26, -110, -35, -127, 72, -47, 19, -38, 8, 71, -61, -47, -60, 73, -11, -71, -84, 1, -74, 108, -22, -127, -68, -21, -22, -80, 26, -24, -57, 17, 127, 41, 44, 0, -72, -7, -79, -67, -58, -107, -23, 0, 23, -30, 50, -42, 29, 5, 24, -25, -16, -32, -12, 17, -8, 127, -26, 4, 10, 31, 62, -14, 30, -27, -16, 40, -127, 27, -32, -93, 67, 92, 22, 53, 11, -54, -12, 29, 104, -68, 111, 64, -54, -68, 30, -13, 127, -12, -63, 28, 29, -63, 45, 46, -16, -74, 30, 105, 77, -3, -127, 91, 75, -3, 24, -4, -33, -70, -81, 99, 46, 23, 51, -127, 63, -90, -47, 40, 12, 115, -33, 4, 24, -98, 12, -24, 77, 19, 36, 49, -127, -28, 49, 10, -88, -30, 15, -58, 27, -52, 12, 26, 112, 118, -112, 27, 89, 67, -28, -42, -19, -27, 49, 101, -127, 58, 59, 85, -90, -29, 17, -57, -50, -11, 107, -17, -44, 36, 92, 34, -65, -127, -19, 99, -74, 127, -30, -12, -30, -64, 70, 57, 23, -68, -17, 53, -22, 50, -2, 52, 99, 26, -59, 16, -70, 31, -127, -38, -12, 10, -82, 10, 41, -99, 28, 40, -86, -51, 126, 40, -49, -110, -65, -64, -44, 47, -19, -11, -36, 127, -67, 111, 63, 109, 12, -127, -10, 41, 83, -42, -6, 14, -40, 34, 85, -49, 6, -6, 25, -76, 3, -85, 116, 30, -1, 127, 89, 30, -8, -56, -8, 27, -75, -91, 104, 37, 108, 21, 122, -127, 19, 39, -10, 117, -55, 37, -7, -61, 20, -109, -61, 99, 38, 6, 35, 50, 127, 109, -5, 70, -15, -86, -75, 109, -48, -74, 26, -75, -27, 115, -4, -51, -101, 35, -80, 47, -34, 23, -127, 68, 4, -89, -61, 79, 18, -48, -22, -56, -35, -45, 17, 47, 8, -66, -127, -35, -60, 37, -12, 58, 90, 116, 57, -30, 61, 26, 3, 25, -56, -77, 33, 75, -127, -66, -35, 63, 120, -59, -127, -28, 37, 14, 47, -23, -1, 23, -52, 18, 0, 9, -26, -91, -127, 25, 44, 22, -19, 45, -33, -112, -112, -115, 115, 6, 38, 38, 7, 24, 7, -101, -8, -43, -24, 36, 127, -9, 14, -100, -1, -50, 37, -57, -4, 61, 5, 4, -40, 52, 41, 126, -17, -80, -22, 127, 40, 5, -33, 78, -40, -10, -10, 44, 61, 38, -15, -114, -12, 28, -32, 3, -70, -127, -49, -3, -51, 24, -9, -40, -127, -5, -73, 17, -14, 60, 68, 47, -2, -18, 47, 10, 124, 53, 102, 51, -127, -72, 8, 21, -35, -50, -30, -68, 30, -45, -5, -14, -47, -125, 19, -127, 0, 52, -24, 27, 80, -14, 19, 31, 13, 84, -48, 45, -35, -65, -46, -65, 93, 116, -46, 36, 85, 52, -88, 49, -7, 127, -97, 57} ;
pub const tensor_const_fold_opt__197_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__197_quantized, &shape_tensor_const_fold_opt__197_quantized);

 // ----------- Initializing tensor_relu6__35_0_scale;

const shape_tensor_relu6__35_0_scale : [1]usize = [_]usize{ 1} ;
const array_relu6__35_0_scale : [1]f32 linksection(".rodata") = [_]f32{ 2.3361618e-2} ;
pub const tensor_relu6__35_0_scale = Tensor(f32).fromConstBuffer(&allocator, &array_relu6__35_0_scale, &shape_tensor_relu6__35_0_scale);

 // ----------- Initializing tensor_const_fold_opt__162_scale;

const shape_tensor_const_fold_opt__162_scale : [1]usize = [_]usize{ 48} ;
const array_const_fold_opt__162_scale : [48]f32 linksection(".rodata") = [_]f32{ 2.6965393e-3, 3.636202e-3, 3.5195963e-3, 2.851714e-3, 2.463844e-3, 3.1641016e-3, 2.1389208e-3, 1.6292948e-3, 3.4462682e-3, 3.4215385e-3, 2.1464783e-3, 2.1026104e-3, 3.0059405e-3, 3.0918485e-3, 3.0530472e-3, 1.713705e-3, 2.9637692e-3, 2.659759e-3, 1.96708e-3, 3.0190807e-3, 3.4858554e-3, 2.8163085e-3, 2.393825e-3, 1.4495135e-3, 2.5815663e-3, 2.81413e-3, 2.891096e-3, 3.781942e-3, 1.1732971e-3, 3.294529e-3, 1.7959664e-3, 1.683777e-3, 2.4259982e-3, 2.4629796e-3, 2.3236217e-3, 3.4536857e-3, 2.2821655e-3, 2.5672915e-3, 3.0830486e-3, 1.9766758e-3, 3.6197049e-3, 9.708304e-4, 1.6114193e-3, 3.0718565e-3, 1.1344188e-3, 2.5862243e-3, 2.8430952e-3, 2.4739502e-3} ;
pub const tensor_const_fold_opt__162_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__162_scale, &shape_tensor_const_fold_opt__162_scale);

 // ----------- Initializing tensor_const_fold_opt__198_quantized;

const shape_tensor_const_fold_opt__198_quantized : [4]usize = [_]usize{ 16, 1, 1, 96} ;
const array_const_fold_opt__198_quantized : [1536]i8 linksection(".rodata") = [_]i8{ 31, 26, 14, -4, -4, -75, -19, -3, -24, -69, 4, -16, 51, -73, 54, 39, -87, -40, 39, 30, 78, 23, -57, 1, -5, 64, 127, 70, 25, 79, 51, -24, 10, 2, 27, -8, 19, 33, -15, 0, 119, 23, 24, -13, -15, 13, 7, -46, 46, -39, 100, -4, -63, -4, 29, 10, 6, -40, 5, 11, -7, 50, -47, -10, 24, 2, 63, 12, 13, -35, 3, 10, 21, 47, 7, 36, 64, -30, 48, 25, -10, 41, 35, 32, -59, -6, -6, 78, 33, 4, -70, -12, 28, -13, 103, 69, 13, 33, -35, -30, 12, -15, 76, -69, -52, -33, -54, -60, 10, -43, 14, -45, -24, -32, -21, -5, -29, -84, 112, -34, -10, 18, 4, 45, -56, 21, -50, 9, -26, 19, 1, -11, -10, 61, -41, 66, 15, 19, -6, -59, 35, -58, -3, 26, -68, 1, 44, -105, -51, 44, 45, 50, 23, 23, -67, 3, -46, -8, -24, -6, 31, 22, 86, 6, -25, -127, 0, -3, 30, 67, -14, 22, -44, -28, 86, -36, 47, -23, 63, -64, -24, -58, -14, 17, -22, -54, 43, -16, 59, -67, -26, 53, -12, -1, 22, -27, 81, 53, -51, 41, -54, 47, 23, -29, 40, -5, 30, 36, 24, -28, -127, 9, -22, -22, -8, 32, 0, -12, -33, 15, -45, -11, -40, 81, -17, -29, 2, 33, -40, 34, -27, -34, 63, 14, 20, 29, 1, 68, 27, -11, -76, 13, -12, 17, -13, 43, 1, -61, 45, 23, 52, 19, -23, 11, -4, 45, 44, 9, -29, -11, 8, -9, -7, -22, 34, 48, 25, 55, -39, -12, -25, -38, 32, 41, 52, 3, -11, -51, -3, -37, -28, -31, 2, 76, -12, -27, 86, -46, 39, -20, -23, -127, -1, -47, 117, -10, 30, 126, -75, -23, 20, -31, -35, 86, 64, 50, -38, 33, -62, 44, 11, -1, -41, 104, 61, -12, -49, -6, -69, 82, 5, -18, 56, -2, 14, -61, -39, 78, 24, 11, -29, 17, 59, -37, 22, 33, 62, -46, 44, -41, 120, 31, 19, -21, 13, -23, -23, -60, -44, 85, 87, -12, -17, -12, 119, -47, -43, -32, -74, 23, 1, -60, -5, -59, 21, -62, 127, -11, -17, -65, -54, -48, -36, -53, 105, 92, -32, 38, -48, 10, 10, -112, -18, 51, -20, 72, 35, 19, -26, 15, -51, -17, 3, -35, 4, -25, 33, 32, -26, 24, -15, -44, -23, -78, 17, -33, -73, 8, -38, -28, -8, 10, -36, 127, -43, -14, 16, -35, 16, -33, 69, 37, -35, 10, 23, 13, 6, -43, -57, 0, 66, -23, 11, -31, -53, 0, -61, 9, 33, 10, -3, 48, -43, 15, -27, -52, -12, 9, 64, 23, -66, -9, -3, 4, -13, -65, -34, 65, 50, 72, -42, -1, -60, 24, 9, 61, 12, -73, 41, -62, -22, -59, -26, -45, -36, -19, 8, 5, 39, -19, 8, -9, 24, -7, -21, -22, -15, -12, 30, 14, -26, 2, -23, -29, 8, -29, -9, 10, -49, -52, -27, 14, -22, 8, 20, -49, 58, -16, -7, 38, 28, 64, -7, -90, 11, -1, -36, -37, -31, 5, -52, -7, -29, 7, 10, 1, -95, 19, -27, 8, 38, -2, 18, -76, 13, 27, -32, -60, -9, -23, 33, 9, 10, 52, -48, -1, 103, -18, -19, -24, 8, 14, -17, 30, 30, 20, -12, -11, 127, 39, -23, -15, -29, 10, 39, 71, -6, 80, 5, -32, -21, 1, 18, -6, -33, 16, -1, -51, 58, 33, -47, 105, -37, -89, -8, -61, -83, 44, 10, 17, -44, 57, 19, 13, 6, -60, -79, -9, -78, -40, 5, -49, -8, 66, -127, 23, -24, -28, 36, 52, -31, -4, -16, -30, 20, -28, -44, 33, 43, -34, 16, 26, -72, -11, 26, 20, -69, -92, 66, -22, -35, 4, 7, -10, 16, -18, -27, -34, 24, 5, 38, -78, -56, -36, -93, -7, 2, -44, -62, -86, 9, -99, 70, 8, -54, 31, -35, 70, 12, -67, 62, -26, -20, -2, -83, 62, -71, 62, 23, -42, 64, -92, -31, 4, -56, 66, -28, 2, 54, 8, -100, 10, 92, 44, 11, -56, -10, -35, -22, -3, 4, 16, -60, 5, -26, -24, 63, 54, 12, 73, -33, 30, 7, 38, -63, -127, 41, 113, -14, 35, -55, -11, -13, -14, 24, -92, 37, 73, 83, 73, -7, 52, -35, 18, 39, -63, 44, -58, -4, 25, -72, -35, 43, 34, 25, -60, 73, -47, 91, -17, -47, -29, 79, 21, -37, -26, -90, -33, 47, -55, 92, -35, -3, -10, -77, -16, 56, 0, -61, 54, -20, 21, 13, 32, 56, -32, 90, -22, -20, -58, 9, -6, -10, -2, 20, 13, -19, -10, 62, 46, 6, 35, -8, -7, 59, 0, 13, -1, -10, -73, -33, -24, -28, -35, 75, 5, -9, 53, -7, -22, -13, 9, -5, -9, -38, -11, 14, -38, -4, 39, 27, -43, 10, -23, 26, -12, 33, 9, 47, -4, -3, 18, -41, -5, -15, 97, -39, 4, -12, -57, -59, 0, -80, -23, -5, 7, -8, 14, 48, -16, -12, -127, 45, -105, 17, 19, -43, 22, -24, -2, 2, 51, 60, -51, -38, 58, -47, 78, 17, -7, -52, 4, -3, -62, -19, -31, -19, 12, 12, 7, -7, 35, -40, 3, 46, 57, -19, 40, 23, -45, -11, 31, -20, -27, -2, 34, -5, 8, -22, 23, 10, 9, 42, -8, 13, -3, -5, -11, 20, 63, -20, -12, 13, 4, -2, -24, 3, 10, 0, 54, 20, 34, -28, 0, -7, 24, 127, 20, -12, -8, 21, -20, 23, 13, -10, -5, 85, 6, 21, 28, 62, -5, 29, 3, -29, 15, 24, -115, -34, -104, -27, -19, 37, -1, -1, 25, -2, -43, 33, 11, -53, -5, 9, 107, 33, 31, 53, 37, -15, 31, 20, 46, 9, -8, -16, 1, -40, -27, 65, 11, -41, 29, 15, 7, -4, -54, -34, 3, 25, -6, 18, -22, -15, -29, 24, -24, -80, 34, -24, 50, -12, -4, 25, 25, -32, 0, 15, 10, -4, 3, 36, -10, 54, -43, -32, 0, 9, 28, 18, 10, 9, -43, -21, -7, -4, 36, -10, 12, -2, -9, -13, -49, -11, 19, -3, -1, -86, -37, -41, -20, 55, -17, -12, 17, 33, 13, 60, -15, -95, 19, -3, 30, 6, -6, -1, 11, -71, -127, -29, 25, 3, 29, 48, -30, 10, 14, 13, -27, 10, -16, -46, 16, 9, 12, 73, -21, -20, -47, 31, 0, 17, -12, -39, 62, 13, -44, 6, 47, 9, -18, 25, 28, 70, 7, 36, -60, -35, 28, 17, 115, -87, 12, 25, -7, 45, 12, -63, 48, -20, 13, -54, 7, -2, -31, 63, -15, -14, -7, -24, 17, -89, 78, -18, -4, 12, -38, 46, 12, -8, -72, -1, -27, -127, -92, 18, -14, -98, 32, 73, 27, -22, 8, 38, 66, -116, -36, -9, -13, -5, -1, -31, -12, 62, 88, 34, -65, 9, 3, -29, 18, 90, 24, 34, 36, -41, -27, 8, -21, -1, 36, 48, -34, 16, -15, 0, -20, -17, 21, 7, -34, -24, 18, 5, 54, 5, 42, -29, -33, -127, -3, 86, -29, 37, 11, -17, -77, 77, -6, 30, -19, -5, 32, 3, -50, 6, 46, 43, 3, 22, -20, -64, -10, -41, 100, 65, -25, 31, -71, 10, 17, -40, -32, 23, 58, 69, 4, -5, -15, 31, 15, 105, 35, 8, 19, 2, -4, -24, 7, -37, -39, 43, -55, 16, -50, 27, -39, -5, 4, 14, -95, 4, 27, -38, 14, 20, 64, 7, 49, -6, 31, -67, 26, 20, 6, -13, -1, 39, 70, -58, 46, -42, -28, 33, -39, 26, 46, 59, 8, -44, -40, -10, 15, 52, 43, -26, 18, 25, 39, 65, -24, -9, 54, -9, 66, 16, -49, -49, -36, 12, -20, 17, 10, 51, 51, -19, 48, -44, 30, -13, -17, -5, -48, 60, 36, 16, -42, -22, -20, 44, 16, 11, -25, 21, 98, 127, 35, 14, -7, -56, -18, 43, 57, -89, 63, 17, -70, 119, -25, -25, -37, 13, 16, 18, 47, -22, -33, -2, -19, 10, 57, 45, 23, 61, 50, -19, 69, 30, 14, -52, -43, 43, 46, -59, -29, 79, -9, -69, 7, 78, -8, -35, 35, -68, 37, -16, 39, -108, 16, -68, 12, -59, -109, 15, 4, 26, 98, -70, 23, 17, -16, -31, -51, -2, -61, 36, -40, 67, -19, -5, 76, -64, 25, -2, -36, 100, 40, -2, 30, -35, 26, -50, 39, 34, 30, 46, 79, 4, 32, 30, -43, 10, -76, 61, 63, 78, 47, -42, 44, 31, 5, 32, -5, 44, 14, -72, 124, 12, -117, 116, -15, -5, 23, -127, -8, -13, -6, -49, -12, 51, 39, 73, -28, 9, 44, 19, 5, -16, -22, 13, 33, -46, -12, 59, 55, -17, -19, -4, 18, -63, 34, -3, -29, 23, 38, 59, -26, 67, 13, 22, -38, -23, 36, 58, 34, -18, -73, 54, 45, 54, 56, 57, 33, -16, 24, -46, -127, 12, -38, -25, -13, -18, -1, -7, -37, -14, 55, -14, 5, -17, 13, 4, -58, -40, 40, 19, 30, -68, 42, -6, -28, -8, -12, -3, -116, -40, -90, -22, 30, -115, 23, 72, -42, 44, 13, -55, 4, -11, -31, 31, 84, -9, -66, -21, -30, 26, -18} ;
pub const tensor_const_fold_opt__198_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__198_quantized, &shape_tensor_const_fold_opt__198_quantized);

 // ----------- Initializing tensor_const_fold_opt__169_scale;

const shape_tensor_const_fold_opt__169_scale : [1]usize = [_]usize{ 8} ;
const array_const_fold_opt__169_scale : [8]f32 linksection(".rodata") = [_]f32{ 3.1588718e-3, 4.679658e-3, 6.4027333e-3, 5.172806e-3, 5.2667316e-3, 6.5501886e-3, 3.2170373e-3, 3.9900783e-3} ;
pub const tensor_const_fold_opt__169_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__169_scale, &shape_tensor_const_fold_opt__169_scale);

 // ----------- Initializing tensor_model_1_block_5_depthwise_bn_fusedbatchnormv3_quantized;

const shape_tensor_model_1_block_5_depthwise_bn_fusedbatchnormv3_quantized : [1]usize = [_]usize{ 96} ;
const array_model_1_block_5_depthwise_bn_fusedbatchnormv3_quantized : [96]i32 linksection(".rodata") = [_]i32{ -1662, -762, -4549, -6417, 1083, 2519, 208, -2410, -3020, 4298, 10024, -2604, 161, 10479, 7797, -4843, 14683, 1511, -5824, 293, 19, -1232, 5181, -2368, 488, -4606, 416, -6056, -1422, -10017, -4236, 697, 8455, -1195, -1723, -505, -269, -2390, -702, 8974, 545, -835, 1700, -2222, 14976, 14953, -643, 14795, 36, 9931, 11027, -3291, -577, -2759, 2099, 9045, -559, 2066, 11432, 2265, 9233, 12034, 4508, -7571, -1513, 700, -1386, 4535, -3051, -2988, 1069, 2776, 12301, -26, -391, 10880, -506, 657, 13123, 1127, -2684, 17556, -4313, 1608, 20039, -1357, -4242, -864, 3860, -6355, 15459, -1059, -580, -838, -4830, -2433} ;
pub const tensor_model_1_block_5_depthwise_bn_fusedbatchnormv3_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_model_1_block_5_depthwise_bn_fusedbatchnormv3_quantized, &shape_tensor_model_1_block_5_depthwise_bn_fusedbatchnormv3_quantized);

 // ----------- Initializing tensor_model_1_block_5_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_quantized;

const shape_tensor_model_1_block_5_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_quantized : [1]usize = [_]usize{ 16} ;
const array_model_1_block_5_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_quantized : [16]i32 linksection(".rodata") = [_]i32{ 11719, 19442, -1077, 2049, -3368, 10426, 200, 2424, 16159, -5281, -5825, 7344, -16107, 8502, 3714, 10530} ;
pub const tensor_model_1_block_5_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_model_1_block_5_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_quantized, &shape_tensor_model_1_block_5_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_quantized);

 // ----------- Initializing tensor_model_1_block_3_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_3_project_conv2d1_scale;

const shape_tensor_model_1_block_3_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_3_project_conv2d1_scale : [1]usize = [_]usize{ 1} ;
const array_model_1_block_3_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_3_project_conv2d1_scale : [1]f32 linksection(".rodata") = [_]f32{ 5.352016e-2} ;
pub const tensor_model_1_block_3_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_3_project_conv2d1_scale = Tensor(f32).fromConstBuffer(&allocator, &array_model_1_block_3_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_3_project_conv2d1_scale, &shape_tensor_model_1_block_3_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_3_project_conv2d1_scale);

 // ----------- Initializing tensor_const_fold_opt__198_scale;

const shape_tensor_const_fold_opt__198_scale : [1]usize = [_]usize{ 16} ;
const array_const_fold_opt__198_scale : [16]f32 linksection(".rodata") = [_]f32{ 3.874345e-3, 2.1323222e-3, 2.991403e-3, 2.8650507e-3, 3.9655454e-3, 5.5685863e-3, 3.1999103e-3, 2.6172984e-3, 4.7963704e-3, 4.288331e-3, 3.7031807e-3, 3.688904e-3, 4.082939e-3, 4.6789343e-3, 2.209424e-3, 3.0604373e-3} ;
pub const tensor_const_fold_opt__198_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__198_scale, &shape_tensor_const_fold_opt__198_scale);

 // ----------- Initializing tensor_model_1_block_2_depthwise_bn_fusedbatchnormv3_quantized;

const shape_tensor_model_1_block_2_depthwise_bn_fusedbatchnormv3_quantized : [1]usize = [_]usize{ 48} ;
const array_model_1_block_2_depthwise_bn_fusedbatchnormv3_quantized : [48]i32 linksection(".rodata") = [_]i32{ -1249, 11673, -1084, -352, 137, -838, 5255, -420, -4032, 138, -4976, -169, 1211, -847, -4472, 3535, 6166, 3959, -403, -5492, -6590, -542, 17536, -6349, -3424, -112, 6998, -6212, -1898, 180, -9154, 10783, 3486, -432, 1865, 50, -18, -737, 12454, 276, 3443, -3290, 3447, 6807, -376, 8092, 1689, -907} ;
pub const tensor_model_1_block_2_depthwise_bn_fusedbatchnormv3_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_model_1_block_2_depthwise_bn_fusedbatchnormv3_quantized, &shape_tensor_model_1_block_2_depthwise_bn_fusedbatchnormv3_quantized);

 // ----------- Initializing tensor_model_1_block_2_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_quantized;

const shape_tensor_model_1_block_2_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_quantized : [1]usize = [_]usize{ 8} ;
const array_model_1_block_2_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_quantized : [8]i32 linksection(".rodata") = [_]i32{ 3787, 627, 23795, -2520, 4607, -13609, 985, -16166} ;
pub const tensor_model_1_block_2_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_model_1_block_2_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_quantized, &shape_tensor_model_1_block_2_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_quantized);

 // ----------- Initializing tensor_const_fold_opt__199_scale;

const shape_tensor_const_fold_opt__199_scale : [1]usize = [_]usize{ 96} ;
const array_const_fold_opt__199_scale : [96]f32 linksection(".rodata") = [_]f32{ 1.9947935e-3, 2.9699937e-3, 2.3188645e-3, 2.0843265e-3, 1.8249087e-3, 2.4490128e-3, 1.5825569e-3, 2.6477664e-3, 1.5203966e-3, 2.7241847e-3, 1.9542975e-3, 2.1717492e-3, 2.3322732e-3, 1.1859768e-3, 2.4187516e-3, 3.2105367e-3, 3.0778246e-3, 2.2139295e-3, 2.1439313e-3, 1.7181855e-3, 2.1144892e-3, 2.0906474e-3, 2.015095e-3, 2.649737e-3, 2.125681e-3, 2.3064981e-3, 1.9881034e-3, 2.5944163e-3, 1.2784246e-3, 2.0141217e-3, 1.5203225e-3, 2.5896926e-3, 3.372779e-3, 1.7472389e-3, 1.5262523e-3, 1.7621487e-3, 2.5125726e-3, 2.4826387e-3, 1.7437238e-3, 1.1672606e-3, 2.4427334e-3, 2.2830004e-3, 1.7126448e-3, 1.4155468e-3, 2.8751239e-3, 1.9214393e-3, 2.2097032e-3, 2.156843e-3, 1.2677416e-3, 1.5241405e-3, 2.106702e-3, 1.3356312e-3, 1.4275449e-3, 1.7013361e-3, 2.3652988e-3, 2.1727402e-3, 2.1655136e-3, 2.427959e-3, 3.3748045e-3, 2.1313992e-3, 2.4616937e-3, 1.7987114e-3, 2.6676687e-3, 1.5988561e-3, 1.3464661e-3, 2.30897e-3, 2.14099e-3, 1.6207009e-3, 2.45595e-3, 2.6250796e-3, 1.5762044e-3, 1.4504961e-3, 1.8121916e-3, 3.1773688e-3, 1.1780496e-3, 1.516239e-3, 2.0747792e-3, 1.7278587e-3, 1.9066388e-3, 2.6620375e-3, 1.0268086e-3, 1.8253266e-3, 2.1792618e-3, 2.2065225e-3, 2.0918525e-3, 1.8568544e-3, 2.283027e-3, 2.5158555e-3, 2.41866e-3, 3.9585237e-3, 1.956041e-3, 1.6160641e-3, 2.6928042e-3, 1.787314e-3, 2.817765e-3, 2.169342e-3} ;
pub const tensor_const_fold_opt__199_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__199_scale, &shape_tensor_const_fold_opt__199_scale);

 // ----------- Initializing tensor_const_fold_opt__171_quantized;

const shape_tensor_const_fold_opt__171_quantized : [4]usize = [_]usize{ 3, 1, 1, 32} ;
const array_const_fold_opt__171_quantized : [96]i8 linksection(".rodata") = [_]i8{ -33, 106, -38, 8, 127, -40, -66, -62, 74, -11, -10, -89, 68, 54, -25, -9, -33, -7, -47, 53, 21, -76, 104, -39, 7, 40, 72, -7, 18, 7, -25, 95, 80, -80, -74, -4, -21, 41, -127, -58, -87, 111, 68, 5, 89, 69, -6, -51, 83, 8, -112, -105, 106, -8, -27, 38, -91, 47, -40, -48, 70, -31, -83, -53, -16, -111, 97, 107, -31, 63, -101, 49, -54, 42, -115, 100, 8, -94, 88, 42, 86, -113, -109, 72, 1, 23, -5, 43, -127, -79, -25, -40, 11, 106, -68, 37} ;
pub const tensor_const_fold_opt__171_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__171_quantized, &shape_tensor_const_fold_opt__171_quantized);

 // ----------- Initializing tensor_model_1_block_1_depthwise_bn_fusedbatchnormv3_quantized;

const shape_tensor_model_1_block_1_depthwise_bn_fusedbatchnormv3_quantized : [1]usize = [_]usize{ 48} ;
const array_model_1_block_1_depthwise_bn_fusedbatchnormv3_quantized : [48]i32 linksection(".rodata") = [_]i32{ 11378, 3773, 3906, -1833, 1858, -927, -972, 28704, -2264, 559, 9821, 66440, 1691, 7428, 981, 10425, -3228, 13998, 515, 7243, 14502, -59, 2791, -8978, 10525, 1861, 2326, 13143, 1217, 598, -7918, 10611, 5416, 90, -1554, 7300, -8094, 11793, -3043, 19018, -3679, -1340, 5746, 3089, 2658, -2730, 1892, -747} ;
pub const tensor_model_1_block_1_depthwise_bn_fusedbatchnormv3_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_model_1_block_1_depthwise_bn_fusedbatchnormv3_quantized, &shape_tensor_model_1_block_1_depthwise_bn_fusedbatchnormv3_quantized);

 // ----------- Initializing tensor_const_fold_opt__187_scale;

const shape_tensor_const_fold_opt__187_scale : [1]usize = [_]usize{ 48} ;
const array_const_fold_opt__187_scale : [48]f32 linksection(".rodata") = [_]f32{ 2.672994e-3, 4.2141504e-3, 6.6982596e-3, 7.139495e-3, 3.474622e-2, 7.3533524e-3, 6.8886774e-3, 4.351758e-3, 4.999268e-3, 3.3561555e-3, 2.6173044e-3, 1.904757e-3, 3.5617205e-3, 2.422184e-3, 1.1847736e-2, 8.075873e-3, 5.0589885e-3, 1.4108809e-2, 5.5275955e-3, 5.4788343e-3, 4.141746e-3, 1.7552221e-2, 4.8667947e-3, 1.0770117e-2, 5.25558e-3, 3.1525474e-3, 2.5525843e-3, 3.8973803e-3, 8.057261e-3, 4.1605037e-2, 1.121018e-2, 3.0541176e-3, 4.2490005e-3, 5.4510017e-3, 8.046623e-3, 2.3091438e-3, 4.0974747e-3, 2.057484e-3, 5.9279567e-3, 2.803027e-3, 4.964908e-3, 6.182628e-3, 2.8633848e-3, 2.8902416e-3, 3.0313034e-3, 1.4016463e-2, 2.8013962e-3, 8.719821e-3} ;
pub const tensor_const_fold_opt__187_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__187_scale, &shape_tensor_const_fold_opt__187_scale);

 // ----------- Initializing tensor_model_1_conv1_relu_relu6_model_1_bn_conv1_fusedbatchnormv3_model_1_expanded_conv_depthwise_bn_fusedbatchnormv3_model_1_expanded_conv_depthwise_depthwise_model_1_block_5_project_conv2d_model_1_conv1_conv2d__40_0_zero_point;

const shape_tensor_model_1_conv1_relu_relu6_model_1_bn_conv1_fusedbatchnormv3_model_1_expanded_conv_depthwise_bn_fusedbatchnormv3_model_1_expanded_conv_depthwise_depthwise_model_1_block_5_project_conv2d_model_1_conv1_conv2d__40_0_zero_point : [1]usize = [_]usize{ 1} ;
const array_model_1_conv1_relu_relu6_model_1_bn_conv1_fusedbatchnormv3_model_1_expanded_conv_depthwise_bn_fusedbatchnormv3_model_1_expanded_conv_depthwise_depthwise_model_1_block_5_project_conv2d_model_1_conv1_conv2d__40_0_zero_point : [1]u8 linksection(".rodata") = [_]u8{ 0} ;
pub const tensor_model_1_conv1_relu_relu6_model_1_bn_conv1_fusedbatchnormv3_model_1_expanded_conv_depthwise_bn_fusedbatchnormv3_model_1_expanded_conv_depthwise_depthwise_model_1_block_5_project_conv2d_model_1_conv1_conv2d__40_0_zero_point = Tensor(u8).fromConstBuffer(&allocator, &array_model_1_conv1_relu_relu6_model_1_bn_conv1_fusedbatchnormv3_model_1_expanded_conv_depthwise_bn_fusedbatchnormv3_model_1_expanded_conv_depthwise_depthwise_model_1_block_5_project_conv2d_model_1_conv1_conv2d__40_0_zero_point, &shape_tensor_model_1_conv1_relu_relu6_model_1_bn_conv1_fusedbatchnormv3_model_1_expanded_conv_depthwise_bn_fusedbatchnormv3_model_1_expanded_conv_depthwise_depthwise_model_1_block_5_project_conv2d_model_1_conv1_conv2d__40_0_zero_point);

 // ----------- Initializing tensor_const_fold_opt__176_quantized;

const shape_tensor_const_fold_opt__176_quantized : [4]usize = [_]usize{ 8, 1, 1, 48} ;
const array_const_fold_opt__176_quantized : [384]i8 linksection(".rodata") = [_]i8{ -46, 0, 32, 9, -36, -13, 8, 11, -41, -7, -55, -54, -26, -60, -14, -31, 39, -36, 33, 39, -8, 31, -34, 13, 1, -41, 51, -10, -6, -20, 17, 13, 81, 29, 36, -127, 16, -3, -22, -27, -2, -15, 40, 40, 32, 3, 22, 0, 1, 34, 61, -24, -12, 47, -53, -28, 9, 30, -16, -91, 14, 97, -9, 65, -22, 8, -34, -59, 13, -94, -22, 21, -85, -17, -2, -125, -27, -19, 42, -69, 52, 91, -55, 5, 122, -39, 0, 47, -32, 39, -81, -35, 127, -18, -41, -27, 2, -24, -58, 12, -3, 42, 31, 5, -8, 41, -3, 22, 59, -86, 19, -50, 39, -92, 29, 36, -32, 46, -4, 25, -18, 57, -23, -64, 20, 7, 20, -63, -47, -80, 30, -27, 102, 24, -7, -69, 2, 24, 75, 31, 127, 15, 23, 25, -14, 17, -70, 45, 15, -33, -69, -108, 18, -16, -35, 2, 2, 27, 33, 79, -7, 6, -41, 21, 9, -104, 27, -55, -80, -15, 127, -15, -46, 0, -62, 11, -2, -79, 9, -11, -19, -40, -19, 99, -43, -34, 1, 18, 39, 12, -42, 45, -19, -48, -6, 6, 30, -29, -11, -9, 28, -30, 54, -78, 7, 30, 10, 13, -16, -23, 12, -9, -9, -50, 5, -21, 17, -8, 40, 52, 37, 22, -15, 33, -12, 0, 1, 0, -66, 85, 39, -28, 27, -22, -20, -20, -73, 9, 127, 11, 47, -22, 6, 19, 31, -41, 37, -127, 26, -38, -3, 122, -81, 67, 25, -67, 5, -88, 17, 1, -37, 74, -36, -51, -57, 81, -23, 5, -21, 42, -46, -30, 30, 51, 36, -6, -42, -3, -45, -41, 21, -39, -50, -10, -34, 55, 98, 22, 50, -20, 24, -10, -37, -18, -32, 17, -38, 4, -39, 127, -43, -35, -5, 55, 14, 46, 18, 33, 36, -78, -22, 16, 21, 39, -65, 6, 11, -38, 13, 38, 7, 13, -12, -2, 10, 7, -2, -3, -2, -17, 38, 59, -3, -34, 76, -14, -22, 0, -6, 64, 28, 34, 15, 24, 23, 6, 68, -3, 117, 106, 54, 53, 42, 42, -6, 8, 14, -18, -89, -22, 15, -2, -28, 60, 31, -26, -33, -17, 29, 4, 48, -90, -66, 42, 43, 47, -29, 34, 81, 127, -52, -21, -104, 60} ;
pub const tensor_const_fold_opt__176_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__176_quantized, &shape_tensor_const_fold_opt__176_quantized);

 // ----------- Initializing tensor_model_1_block_5_expand_bn_fusedbatchnormv3_quantized;

const shape_tensor_model_1_block_5_expand_bn_fusedbatchnormv3_quantized : [1]usize = [_]usize{ 96} ;
const array_model_1_block_5_expand_bn_fusedbatchnormv3_quantized : [96]i32 linksection(".rodata") = [_]i32{ 5458, 3989, 649, -888, 8617, 8180, 7874, 1635, -498, 13117, 962, -3791, 4205, 2547, 542, -703, 2763, 7296, -685, 1, 4990, 9799, 11516, -2038, -3847, -465, 18901, -364, 1421, 1680, 9441, -2109, 8172, 1927, 3827, -3899, 1297, -5237, -277, 1722, 1867, 1150, 2256, -840, 1151, 2505, 3962, 4346, 4755, 2374, 5859, 2324, -2868, 2077, 709, 2387, 2032, 3590, 5572, 867, -1072, 6260, 3965, 5414, 3070, 7910, -6225, 2437, 5682, -636, 6896, 2351, 4040, 2411, 3788, 2678, -1019, 2040, 3079, 6580, 3242, 3985, 8468, 902, 3381, 3289, 1778, -1070, 26400, -924, 951, -1106, 10348, 2670, -29, -867} ;
pub const tensor_model_1_block_5_expand_bn_fusedbatchnormv3_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_model_1_block_5_expand_bn_fusedbatchnormv3_quantized, &shape_tensor_model_1_block_5_expand_bn_fusedbatchnormv3_quantized);

 // ----------- Initializing tensor_const_fold_opt__173_scale;

const shape_tensor_const_fold_opt__173_scale : [1]usize = [_]usize{ 48} ;
const array_const_fold_opt__173_scale : [48]f32 linksection(".rodata") = [_]f32{ 3.6635525e-3, 2.2242833e-3, 9.85458e-4, 2.3955815e-3, 3.173926e-3, 4.065284e-3, 2.1539365e-3, 9.5950445e-4, 2.0755092e-3, 3.9868103e-3, 2.9743817e-3, 2.8919685e-3, 7.0151297e-4, 3.5995392e-3, 3.8523201e-3, 6.0583284e-4, 4.6166717e-3, 3.3717419e-3, 4.3433085e-3, 3.2073464e-3, 3.148185e-3, 2.9687134e-3, 6.18338e-3, 5.755035e-4, 2.3814172e-3, 2.1259922e-3, 7.8976457e-4, 3.71916e-3, 1.6988456e-3, 1.9335396e-3, 6.4172186e-3, 5.892383e-3, 3.28517e-3, 3.0304827e-3, 4.130159e-3, 4.1344347e-3, 2.8228457e-3, 4.6974244e-3, 2.7790344e-3, 3.6841372e-3, 2.2745777e-3, 2.9938035e-3, 2.780626e-3, 2.851473e-3, 1.9459764e-3, 3.1826403e-3, 4.6878834e-3, 2.2147004e-3} ;
pub const tensor_const_fold_opt__173_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__173_scale, &shape_tensor_const_fold_opt__173_scale);

 // ----------- Initializing tensor_model_1_logits_biasadd_model_1_logits_conv2d_logits_bias1_zero_point;

const shape_tensor_model_1_logits_biasadd_model_1_logits_conv2d_logits_bias1_zero_point : [1]usize = [_]usize{ 1} ;
const array_model_1_logits_biasadd_model_1_logits_conv2d_logits_bias1_zero_point : [1]u8 linksection(".rodata") = [_]u8{ 123} ;
pub const tensor_model_1_logits_biasadd_model_1_logits_conv2d_logits_bias1_zero_point = Tensor(u8).fromConstBuffer(&allocator, &array_model_1_logits_biasadd_model_1_logits_conv2d_logits_bias1_zero_point, &shape_tensor_model_1_logits_biasadd_model_1_logits_conv2d_logits_bias1_zero_point);

 // ----------- Initializing tensor_model_1_head_relu_model_1_head_biasadd_model_1_head_conv2d_head_bias_zero_point;

const shape_tensor_model_1_head_relu_model_1_head_biasadd_model_1_head_conv2d_head_bias_zero_point : [1]usize = [_]usize{ 1} ;
const array_model_1_head_relu_model_1_head_biasadd_model_1_head_conv2d_head_bias_zero_point : [1]u8 linksection(".rodata") = [_]u8{ 103} ;
pub const tensor_model_1_head_relu_model_1_head_biasadd_model_1_head_conv2d_head_bias_zero_point = Tensor(u8).fromConstBuffer(&allocator, &array_model_1_head_relu_model_1_head_biasadd_model_1_head_conv2d_head_bias_zero_point, &shape_tensor_model_1_head_relu_model_1_head_biasadd_model_1_head_conv2d_head_bias_zero_point);

 // ----------- Initializing tensor_model_1_block_4_expand_bn_fusedbatchnormv3_quantized;

const shape_tensor_model_1_block_4_expand_bn_fusedbatchnormv3_quantized : [1]usize = [_]usize{ 96} ;
const array_model_1_block_4_expand_bn_fusedbatchnormv3_quantized : [96]i32 linksection(".rodata") = [_]i32{ 1398, 7462, 586, 1925, 3211, 12951, -379, 2771, 10588, -1219, 7830, 3492, 1868, 450, 3441, 219, 1971, 4235, -323, 10946, 670, 12083, -1239, 2409, -7152, 1262, 2577, 1688, 4347, 1061, 2178, 4375, 1746, 14399, 4686, 2710, 5585, 2001, 4307, 1357, 23016, 1724, 2601, 1177, 3840, 6937, 7396, 7829, 1376, -787, 2213, 6895, 3078, -2819, 5680, 222, 1765, 10959, 1055, 1892, 2993, 9461, 3426, -1, 24549, 12559, 2099, 3089, 11302, 3867, 3023, 2078, -4436, 5395, 1387, 2929, 631, 11408, 3973, 4741, 4438, 1048, 4205, 16308, -421, 6601, 4489, 1898, -1145, 2280, 1871, 11790, 3180, 2612, 3450, 6040} ;
pub const tensor_model_1_block_4_expand_bn_fusedbatchnormv3_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_model_1_block_4_expand_bn_fusedbatchnormv3_quantized, &shape_tensor_model_1_block_4_expand_bn_fusedbatchnormv3_quantized);

 // ----------- Initializing tensor_const_fold_opt__189_quantized;

const shape_tensor_const_fold_opt__189_quantized : [4]usize = [_]usize{ 16, 1, 1, 48} ;
const array_const_fold_opt__189_quantized : [768]i8 linksection(".rodata") = [_]i8{ 29, 38, 23, -36, 80, 79, -45, 59, -16, 111, 1, 44, -41, 43, -17, 47, 27, 87, 40, -60, -70, 93, -11, 55, 65, 53, 40, 63, -46, -52, -15, 83, -23, 10, -73, 63, 63, -127, -32, 21, 18, -42, 59, -1, -11, -62, -61, -15, -48, -4, -82, -35, 11, 94, -53, 13, -10, -43, -39, 41, 66, -26, -32, -23, -22, -21, -7, 11, -69, 53, -111, -48, -47, -36, 52, 65, -25, -26, 49, -34, 20, -64, -37, 54, 17, -55, 127, -38, -23, 37, -51, -13, 33, 57, 28, 23, 10, 9, 54, -34, -14, -79, 12, 24, 102, 79, -69, 20, 119, -58, 127, 85, -66, -29, -41, 36, 93, -73, -39, -100, 16, -44, 45, -72, 48, 51, -43, 20, 40, -25, 57, 51, -63, 12, 1, -27, 31, 30, 60, -27, 25, -100, 105, -45, 38, 6, -18, -32, 37, 111, 15, -14, 44, -47, 20, -27, -54, 13, 14, 44, -48, -66, 40, -122, -11, 9, -23, -16, -34, 98, 127, 62, -15, -44, 20, 47, 60, -28, 87, 39, -37, -52, -3, 51, 28, 8, -10, 9, 17, 15, -9, -17, 83, 1, 12, -47, 83, 85, 41, 13, 53, -5, -98, 25, 38, -9, 15, -21, -90, -105, -15, -81, -17, 25, -31, -44, -74, 127, -91, 114, -50, -49, 24, 71, 36, -53, 15, -19, -16, 20, -19, 25, -38, -14, -3, 47, -36, 93, -25, -40, 7, -3, -57, 5, -19, 54, 22, -25, 72, 60, 37, 86, 55, -24, 39, -1, -41, 127, -15, 37, 8, -10, -62, -17, 37, -4, -67, -38, -24, 20, 16, -16, -41, -11, 42, 18, -47, -2, -93, 3, 96, -19, 36, 58, -19, 13, -41, 28, 48, 9, 20, 67, 8, -34, 103, -46, 6, 55, 127, 100, 52, 30, -35, 55, 46, -35, -70, 73, 51, -69, -38, 64, -82, 78, 79, -6, 106, 42, -24, 6, 93, -80, -105, -16, 86, 29, -3, -11, 13, 66, 47, -24, 57, 126, 29, -10, -107, -2, -36, 26, -57, -42, 19, 39, 76, 119, -44, -60, -95, 8, -26, -26, -69, 95, 5, 123, -40, 36, 21, 31, -23, -80, -31, -76, 33, 43, -1, 1, -24, 12, 14, -26, -10, -52, 127, 15, 7, 47, 19, -26, 58, 66, -24, 4, -6, -92, 65, -62, 71, -64, 70, -34, -17, -110, 22, 5, -31, -1, 37, 31, -1, 3, -44, 97, 7, 38, -15, 33, 65, -13, -68, -28, -127, -27, -60, -98, 10, -57, 5, 84, 1, 26, 104, 24, 13, 0, 72, 111, -12, -64, -48, 73, 21, -38, 29, -68, 34, 72, -34, 41, 18, -34, -38, -10, 22, -45, 122, -17, 6, -105, 44, 39, -80, 47, 49, -45, -22, -65, -27, 71, 53, 71, -38, -26, -47, 25, -19, 127, -26, -38, -64, -17, -19, -1, 33, 100, 58, 77, -65, 20, -8, 26, -18, -11, 29, 33, -70, -44, 60, 43, 58, -8, -32, -15, 56, -52, -63, 127, -4, 54, -1, 3, 26, 21, -38, 46, 1, 95, 42, 3, -41, -10, 82, 8, -17, 40, -6, -50, -39, 21, -81, 4, 34, -14, 19, 42, 32, 36, -25, 45, -16, 31, 30, 52, -5, 1, 19, 17, -127, -69, 67, 24, -11, -50, -6, 23, -38, -40, -16, -1, 97, -3, 47, 13, -15, 32, -15, 31, -8, 50, 26, -6, -58, 6, 43, 86, 93, 23, 32, -34, 57, -3, -62, -22, 83, 11, -59, 2, 43, 15, -55, -61, 7, 5, -41, -41, -127, 13, 74, -91, 27, 31, 42, 104, 90, -120, -33, 45, -46, -89, -3, -18, 34, -25, 12, 19, -17, 78, 65, 73, 33, -32, -49, -21, 25, -8, -35, 5, 56, 7, 30, -15, -38, -33, -39, -106, -42, -100, 9, 23, 62, 17, -102, 29, 102, -60, 49, 47, 127, 9, 100, 17, -6, -90, 64, -64, 116, -1, -65, 13, -33, 2, -46, -104, -111, 15, 44, -32, -75, 69, 39, -54, 69, -59, 8, 41, 77, 54, 58, -29, 88, -65, 58, 13, -65, 8, -41, 23, -82, -34, -29, 49, 67, 57, -9, -68, 8, -51, 62, -103, 12, 2, 101, -57, 16, 5, -7, 124, -89, 4, -52, -24, -81, 4, 127, 48, 91, -28, -80, 18, -11, 67, -18, -39, 100, -32, -50, -39, -54, 55, -70, 4, 47, 24, 94, -5, 8, 34, 19, 69, -12, 61, 61, -16, -36, -19, 14, 43, 8, -44, 26, -49, -55, -61, 46, -78, -47, 62, -34, 10, 27, 5, -60, -6, 127, -19, -98, 15, 57, -26, -50, -30, 14, -2, -35, -31, -19, -2} ;
pub const tensor_const_fold_opt__189_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__189_quantized, &shape_tensor_const_fold_opt__189_quantized);

 // ----------- Initializing tensor_const_fold_opt__201_scale;

const shape_tensor_const_fold_opt__201_scale : [1]usize = [_]usize{ 96} ;
const array_const_fold_opt__201_scale : [96]f32 linksection(".rodata") = [_]f32{ 7.947897e-3, 7.2647836e-3, 5.494085e-3, 5.4611163e-3, 1.5532526e-2, 1.5679337e-2, 1.5318307e-2, 7.796216e-3, 8.420945e-3, 7.711911e-3, 4.4584856e-3, 1.3121439e-2, 1.2731707e-2, 4.192508e-3, 6.562394e-3, 6.6649793e-3, 4.322981e-3, 1.1032049e-2, 7.0947097e-3, 4.495488e-3, 7.565697e-3, 1.2837158e-2, 1.1249013e-2, 8.26891e-3, 3.1421494e-2, 6.7574163e-3, 1.1273268e-2, 4.27397e-3, 8.547423e-3, 3.1519956e-3, 1.4847085e-2, 1.1143335e-2, 8.128669e-3, 7.948858e-3, 1.1735002e-2, 1.4087619e-2, 8.447407e-3, 9.2376275e-3, 1.1728528e-2, 4.866659e-3, 9.271e-3, 1.058414e-2, 1.0413099e-2, 6.79272e-3, 3.7437982e-3, 4.3088505e-3, 1.0811633e-2, 4.3438417e-3, 7.173688e-3, 2.6758115e-3, 5.964301e-3, 5.849715e-3, 7.96295e-3, 6.9270134e-3, 8.769671e-3, 6.821296e-3, 7.835891e-3, 8.179688e-3, 6.8417373e-3, 4.9914313e-3, 5.926737e-3, 7.871352e-3, 6.96686e-3, 4.597218e-3, 5.819495e-3, 1.1749081e-2, 1.761853e-2, 1.0660887e-2, 1.0597559e-2, 6.892851e-3, 1.3574091e-2, 9.053414e-3, 4.733945e-3, 8.619298e-3, 1.3398097e-2, 4.8054857e-3, 6.581638e-3, 1.0689262e-2, 4.764433e-3, 1.1192987e-2, 9.588065e-3, 3.2705087e-3, 1.135339e-2, 7.310484e-3, 3.3706937e-3, 9.0951435e-3, 6.706049e-3, 7.419383e-3, 8.965658e-3, 5.5876314e-3, 3.6283655e-3, 1.4677306e-2, 1.0111806e-2, 1.241612e-2, 4.5781834e-3, 1.4130458e-2} ;
pub const tensor_const_fold_opt__201_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__201_scale, &shape_tensor_const_fold_opt__201_scale);

 // ----------- Initializing tensor_const_fold_opt__187_quantized;

const shape_tensor_const_fold_opt__187_quantized : [4]usize = [_]usize{ 48, 3, 3, 1} ;
const array_const_fold_opt__187_quantized : [432]i8 linksection(".rodata") = [_]i8{ -45, -62, -25, -127, -116, -53, -127, -96, -56, -88, -109, -42, -97, -127, -59, -21, -43, -32, -18, -86, -65, -19, -127, -113, 20, -42, -53, -2, 68, 92, -64, -99, 127, 32, -65, -27, 127, -91, -51, -95, -27, 79, -51, 93, -25, -57, 104, -33, -75, 127, -47, -26, 49, -12, 65, 64, 31, 87, 127, 49, 28, 69, 19, -56, -58, -6, -105, -127, -16, -39, -51, -10, -87, -73, 108, -127, 99, 80, 53, 116, -62, -79, 42, 27, -127, 71, 31, -42, 33, 24, -22, 65, 49, 89, 127, 19, 15, -43, -16, -66, -127, -93, -90, -118, -68, -45, -55, -19, 111, 127, 32, 90, 105, 17, -1, 6, -2, 44, 98, 47, 56, 127, 60, 26, 33, 10, 54, 76, -50, -112, 39, 53, -47, -127, 14, -127, -81, -9, -70, -110, -51, 6, -62, -9, 63, -80, -80, 127, 63, -11, -77, 58, 49, -13, -81, -16, -127, -110, 4, -24, 0, 31, 2, 37, 30, -66, -127, -17, 95, 59, 1, -57, -60, -18, -83, -127, -63, -48, -80, -54, -99, -108, -42, -98, -127, -54, -30, -73, -63, 113, 71, 31, 127, 95, 32, 58, 44, 17, -14, -56, -67, -43, -127, -75, -66, -63, -11, 8, 112, -1, 4, 127, -17, -22, 61, -30, -20, -103, -86, -12, -125, -127, -7, -81, -72, 83, 94, 46, 111, 127, 66, 66, 74, 22, 57, 88, 25, 92, 127, 22, 58, 60, 14, -36, -118, -84, -57, -127, -90, -24, -50, -43, 69, 95, 28, -114, -127, -62, 37, 39, 4, -77, -55, 57, -89, 127, 38, 54, 2, -71, 10, 3, 102, -2, -27, 127, -10, -32, 50, -47, -127, -62, -67, -121, -85, -25, -47, -26, -94, -50, -10, -90, -127, -67, 12, -64, -104, -81, -86, 0, -127, -105, 0, -90, -28, 13, 44, 79, -5, -127, 52, 66, -36, -56, 31, 70, 127, 45, 76, 123, 79, 47, 56, 49, 16, 105, 54, 35, 127, 61, 13, 30, 2, 70, 99, 58, 86, 127, 71, 11, 19, 24, 123, 127, 57, 11, -7, -16, -47, -85, -39, -55, -42, 11, -101, -127, -30, -47, -79, -45, -117, -127, -21, 85, 111, 54, 30, 42, 15, -18, -60, 95, -19, -95, 127, -9, -45, 52, 32, 62, 71, 86, 127, 82, 39, 76, 23, 82, 93, 33, 127, 127, 24, 52, 92, 30, 43, 76, 37, 78, 127, 45, 32, 51, 17, -121, 126, 37, 127, 7, -47, 67, -108, -3, 89, 90, 16, 127, 118, 20, 20, 28, 15, 97, 74, -127, -119, 115, 31, -61, 7, 49} ;
pub const tensor_const_fold_opt__187_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__187_quantized, &shape_tensor_const_fold_opt__187_quantized);

 // ----------- Initializing tensor_const_fold_opt__199_quantized;

const shape_tensor_const_fold_opt__199_quantized : [4]usize = [_]usize{ 96, 1, 1, 16} ;
const array_const_fold_opt__199_quantized : [1536]i8 linksection(".rodata") = [_]i8{ 1, 92, -81, 51, 58, -37, 89, 78, -72, 14, 11, -72, 95, 127, -54, 12, -35, -4, -79, -33, -11, 60, 27, -127, 15, -42, -18, -75, 2, -37, -79, 25, -13, -18, 37, 76, 14, 30, -106, 127, -14, 6, 69, -45, -27, -67, -32, 46, 62, -65, 68, -3, -2, -25, -14, 127, -14, 51, 61, 45, -19, 33, 8, 0, -19, -15, -7, 55, -72, 10, -51, -127, 13, -10, 30, 11, 57, 42, 116, 98, 109, 21, -42, -24, -79, 35, 29, 62, 8, -6, 39, 79, 127, 32, -90, 12, 16, -47, -82, -63, -66, 17, -9, -63, -77, -56, -40, 22, 111, 70, 127, -5, -43, 42, -19, -69, 12, -59, -84, 22, -93, 63, -62, -68, -127, -34, 12, 82, 97, 69, 86, 48, 90, 38, 63, 0, 90, -12, 23, 25, -127, -17, -114, -7, -31, 66, 40, -48, -27, -22, 23, -15, -40, 51, -38, 30, 51, 127, 20, 26, 58, 53, -44, 40, -18, -5, 61, -55, -56, -37, -52, -111, -127, -70, -3, 99, 50, 26, 66, 6, -20, -26, 15, 113, -95, 26, -30, 6, -14, 4, 89, 127, -37, -29, -19, -14, 6, 12, 110, 18, -66, 17, 4, -4, 9, 62, -76, 127, 7, 36, 57, 52, 103, 15, 123, 127, -7, 87, -70, -56, 28, 91, -91, -28, -127, 116, 8, -27, -15, 4, 61, -4, -37, 17, 90, -25, -86, 10, -46, 49, -17, -13, -127, -39, 68, -29, -73, -37, -34, -9, -16, -63, 8, -61, -69, 46, 100, -5, 16, -10, 20, -33, 44, -23, -27, 15, 127, 49, 23, 4, -24, 20, 2, 9, -20, -93, -10, -60, 122, -127, 17, -29, -43, 38, 28, 67, 8, 53, 39, 119, -15, -54, 65, -93, -8, -55, -38, 127, -21, 0, -48, 41, 9, -19, -74, -127, 98, -94, 62, -92, 14, -64, 32, 69, 52, 124, 63, 30, 79, -55, -10, 103, 51, 14, 17, 13, 26, -23, 65, 2, 94, -26, -127, -6, -71, -17, -76, 63, 48, 32, 60, 17, 81, 80, -127, 70, -41, 45, -45, 13, -60, -50, 33, -99, 54, 33, 33, -127, 102, 23, 22, -38, -57, -60, 41, -63, -37, -75, -60, -109, 51, 75, 47, -10, 26, -52, 21, -31, 75, 9, 19, 97, 101, 127, -13, 5, 33, 75, 44, 18, -38, -127, 92, 16, -38, 23, -17, -15, -23, -35, -3, 26, 28, -45, -15, -15, 4, -38, -37, 65, -57, 14, 48, 127, 24, 2, -56, 106, 26, 31, 31, -107, -18, -28, 14, 23, 17, 97, 14, 17, -74, 127, -35, -125, -60, -8, -61, 109, 12, -67, 0, -39, 59, -49, 34, -45, -127, -5, -30, 16, 53, 82, 28, 4, -42, -127, -103, 54, 100, -2, 64, -2, -34, -34, -106, 87, -40, -20, -15, 33, -127, -60, -59, -24, -13, -3, 23, -43, -116, 54, 56, 70, -54, 71, -109, -91, -76, 0, -62, -26, 8, -106, 127, 24, -13, 93, 127, 6, -98, -52, -65, 39, 118, 20, -74, -18, 59, 38, 59, 24, -53, 26, -24, -20, 127, 10, -18, 70, 68, 18, -26, -9, -28, 38, 24, 79, 69, 34, -11, 3, -84, -62, -12, 24, 127, 8, -13, -23, 13, -80, 103, 111, -77, 78, -118, -12, 100, 4, 19, -53, 127, -12, -99, 22, 49, -59, 27, 46, -34, -25, 2, 1, -71, 24, -95, 119, -50, -10, -28, 125, -16, 127, -62, 45, 29, 35, -23, -82, 127, -60, -58, 17, -32, -12, 17, 13, -55, 71, -6, -95, -36, 54, 76, -10, 82, -39, 127, -78, -37, 48, -68, 120, -73, -11, -92, -50, 109, -9, 68, 48, 34, -98, -23, -69, -123, 45, -92, 57, -94, -36, -78, -127, -95, 59, -109, 46, -48, -51, -94, -112, 105, 4, -127, -48, 33, 90, 23, -23, 3, 73, 127, 46, 0, -112, -67, 33, 22, -43, -40, -27, -57, -100, 23, 59, 32, 46, 117, -74, -52, -41, 2, -13, -76, -6, 110, -14, 22, -57, 127, -104, 106, -62, -30, -112, -58, 127, 11, -109, -104, 24, 23, 4, 8, 52, -98, 75, -72, 4, -92, -28, -34, -127, -64, -4, 1, 71, 47, -119, -31, 31, -31, -58, -20, 83, -71, 83, 36, -68, -21, -3, 58, 127, 121, -101, 64, 90, 125, 63, -26, 15, 46, 56, -65, 106, 127, -97, -44, -59, 119, -67, 51, -41, -35, -7, -56, 49, -11, -36, 29, 5, 94, -40, 39, 37, 12, 127, -16, -97, 13, 64, -25, 52, 76, -41, -39, -15, 76, -8, -33, -52, 9, 127, -29, 32, -29, -119, -72, 13, -15, 17, -24, -117, -9, -22, 127, -79, 35, -16, -1, 23, 9, 13, -26, 57, -35, 117, -103, 56, 71, -63, 88, 74, -21, 21, 11, -104, -21, 81, 127, -98, 17, 39, -16, 8, -127, -10, -74, -60, 66, 80, 42, 39, -36, -38, -2, 31, 127, -61, -72, -49, -80, 106, -94, -20, 45, -56, -56, 45, -42, -95, 3, 71, -8, -13, 45, 65, -54, -85, -127, 17, -75, -57, -45, -58, 24, -44, 30, 55, 15, 107, 68, -127, 6, 103, 110, -18, -1, -16, -2, -49, 72, -117, 6, 65, -7, 127, 6, -48, 5, -79, -73, 37, 12, -45, -37, 127, 62, 65, 17, 66, -55, 4, 54, 24, 43, -33, 114, 91, -82, -10, 6, -3, 127, 67, 3, -1, 127, 25, 33, 32, -38, 84, -53, -60, -16, 36, -76, 21, -59, 90, 3, 17, -26, -31, -25, -13, -73, -96, 39, -2, -127, -15, 55, 63, 29, 50, 15, 23, 37, -54, 49, 15, -1, -59, -19, 2, 31, -20, -127, -27, 19, -43, -28, 44, 61, 5, -127, 72, 14, 42, 77, -44, -74, -36, 14, -97, -92, -59, 1, 100, 9, 38, -8, 26, -17, -24, -39, 3, -41, -72, 58, 127, -37, -109, -31, -13, -56, 32, 98, -113, -53, 57, 26, 116, 19, -115, 38, 44, 66, -11, 5, 127, 81, 45, 2, -127, -10, -6, 9, -52, 3, 28, -40, 61, 20, -29, -79, -84, 5, -22, 21, 0, -62, -86, -63, 12, -58, -16, -38, -14, 127, -9, 76, -23, 42, -8, -41, 63, -83, -8, -36, -77, 29, 127, 16, 9, 59, -47, -63, 93, -51, 20, 0, -26, -90, 73, 49, -38, 87, -127, 124, -68, 59, 49, -125, 78, -127, 82, -103, -94, 45, -19, -78, -77, -81, 86, 74, -19, -105, -64, 10, 68, 12, -32, -127, -103, 66, 77, 0, -28, -38, -2, 56, -8, 37, 45, 25, 41, 61, 3, -14, -26, -48, 22, 4, 36, -54, 71, 104, 1, 3, -45, -127, -13, 51, -116, 22, -57, 20, -105, -16, 127, 14, 54, 71, 74, -38, 53, -41, -12, 75, 18, 127, 57, 127, -17, 104, 10, 27, 45, -76, 78, -37, 70, -76, 21, 9, 39, 96, -60, -127, -77, 13, 12, -15, -6, 24, -99, -76, 2, 22, 26, -35, -99, 7, -96, 69, -13, -8, 38, -80, 23, -127, 8, 76, 113, -65, 105, 24, 19, 38, -2, 113, -86, -45, 12, -25, 76, -78, 23, -72, -57, 127, -12, -126, -2, -117, -82, 52, -59, -29, 25, -75, -6, -127, -45, -54, -76, -27, 92, 90, -16, 55, -34, 14, -3, -127, -10, -8, -94, 54, 22, -7, -14, 4, -17, 26, -35, -7, 125, 53, 62, 62, -36, 93, -86, 50, 127, 19, -74, -44, 10, -51, -32, 127, -43, 30, -21, -23, -121, 10, 11, 38, 87, 50, 47, 23, 8, -64, 30, 26, -44, -11, -63, 47, -2, 40, -20, 34, -108, -127, -72, -124, -55, -61, -52, -15, 46, 127, 28, -39, 35, 20, 50, -41, 66, -18, -54, -44, -33, 19, -95, 52, 127, -29, -33, -91, 97, -15, 24, 61, 13, -75, 4, 0, 39, 115, 73, -29, 82, 13, 50, 36, 127, 43, 16, 113, 57, 103, 16, 67, -23, -44, 6, 27, -30, 32, -127, -108, -80, 13, 71, -34, -17, -46, 92, -54, -34, 95, -6, 60, -42, -50, -2, -110, 0, 10, -127, 6, -65, -5, -15, 20, 3, 2, -74, -127, 17, 125, 47, 55, 28, -119, 11, -126, -39, 52, -53, -96, 30, 24, 116, 56, -51, 85, 6, 49, -108, 127, -31, 14, -13, 117, -59, 40, -7, 127, -31, 124, 51, 4, -52, 81, 58, -80, -62, -112, -51, 44, 22, -69, 9, -9, 21, 31, -74, 63, -33, -36, 11, 43, -38, 79, -33, -93, -127, 3, 17, -65, -46, 28, -5, 34, 32, -55, -38, 0, 6, -66, -127, -50, -36, -22, -12, -63, 7, 20, -51, 31, 6, -127, 44, 71, 23, -73, -7, -13, -66, -34, -33, -6, -11, -31, -82, 127, 12, -75, 36, 46, 63, 30, -8, 41, 4, -80, -28, -41, -92, 51, 88, -79, -43, -29, 127, -56, -68, 7, -39, -6, 92, 80, 126, -33, 70, 10, -13, -16, 60, -76, 55, -17, -5, 62, -12, -42, 127, 50, 20, -5, 71, -33, -52, 64, 73, -71, 16, 69, 71, 77, 58, -127, 34, -25, 64, 41, 72, 116, 31, -127, -48, -1, 4, 23, -9, 36, -13, -61, -22, 19, -43, -19, 45, 19, -23, 127, 18, -107, 57, 1, 11, -106, 86, 15, 50, 98, -40} ;
pub const tensor_const_fold_opt__199_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__199_quantized, &shape_tensor_const_fold_opt__199_quantized);

 // ----------- Initializing tensor_model_1_logits_biasadd_model_1_logits_conv2d_logits_bias_quantized;

const shape_tensor_model_1_logits_biasadd_model_1_logits_conv2d_logits_bias_quantized : [1]usize = [_]usize{ 3} ;
const array_model_1_logits_biasadd_model_1_logits_conv2d_logits_bias_quantized : [3]i32 linksection(".rodata") = [_]i32{ 193, -343, -305} ;
pub const tensor_model_1_logits_biasadd_model_1_logits_conv2d_logits_bias_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_model_1_logits_biasadd_model_1_logits_conv2d_logits_bias_quantized, &shape_tensor_model_1_logits_biasadd_model_1_logits_conv2d_logits_bias_quantized);

 // ----------- Initializing tensor_model_1_block_3_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_3_project_conv2d1_zero_point;

const shape_tensor_model_1_block_3_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_3_project_conv2d1_zero_point : [1]usize = [_]usize{ 1} ;
const array_model_1_block_3_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_3_project_conv2d1_zero_point : [1]u8 linksection(".rodata") = [_]u8{ 140} ;
pub const tensor_model_1_block_3_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_3_project_conv2d1_zero_point = Tensor(u8).fromConstBuffer(&allocator, &array_model_1_block_3_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_3_project_conv2d1_zero_point, &shape_tensor_model_1_block_3_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_3_project_conv2d1_zero_point);

 // ----------- Initializing tensor_model_1_block_3_depthwise_bn_fusedbatchnormv3_quantized;

const shape_tensor_model_1_block_3_depthwise_bn_fusedbatchnormv3_quantized : [1]usize = [_]usize{ 48} ;
const array_model_1_block_3_depthwise_bn_fusedbatchnormv3_quantized : [48]i32 linksection(".rodata") = [_]i32{ 12077, 44, 17577, -57, 17081, -1005, 44157, 796, 7740, 41664, 6256, 28620, 72, 14820, 50694, 20119, 1668, 1554, 5456, 54079, -352, 18411, 647, 16340, 12982, 33919, -673, -606, -5645, 13913, 25341, 171, 114, -5380, 3282, 21006, 7982, 34603, 4080, 25387, 26106, 1290, 1289, 14214, 3206, 3000, 43230, 23387} ;
pub const tensor_model_1_block_3_depthwise_bn_fusedbatchnormv3_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_model_1_block_3_depthwise_bn_fusedbatchnormv3_quantized, &shape_tensor_model_1_block_3_depthwise_bn_fusedbatchnormv3_quantized);

 // ----------- Initializing tensor_model_1_block_4_depthwise_bn_fusedbatchnormv3_quantized;

const shape_tensor_model_1_block_4_depthwise_bn_fusedbatchnormv3_quantized : [1]usize = [_]usize{ 96} ;
const array_model_1_block_4_depthwise_bn_fusedbatchnormv3_quantized : [96]i32 linksection(".rodata") = [_]i32{ 14147, -2093, -8607, 7232, -42, 65, 1122, -845, 4897, -4222, -1596, -1782, 8442, -2721, -3749, -8990, 874, 245, -10473, -1170, -1182, -1135, -7009, 1866, -1, 8451, -14067, -5241, -3149, -3601, 897, -981, 11790, 7, 1735, -2884, 2498, 11697, 3918, 9822, 4152, 5398, -874, 7439, 835, -627, 9952, 5776, -6357, 250, -6017, -1139, 877, -3853, -2097, 2579, 1125, 3516, 292, 4543, -129, 809, 776, 5785, 9613, 888, 13051, 11288, -573, 151, 12383, 80, -432, 874, -3124, 388, 18095, 3914, 8399, 5880, 12701, -2281, 9000, 12230, -1243, -86, 11291, -6948, 10182, 183, -7619, -1503, 193, -496, 17209, 240} ;
pub const tensor_model_1_block_4_depthwise_bn_fusedbatchnormv3_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_model_1_block_4_depthwise_bn_fusedbatchnormv3_quantized, &shape_tensor_model_1_block_4_depthwise_bn_fusedbatchnormv3_quantized);

 // ----------- Initializing tensor_const_fold_opt__203_zero_point;

const shape_tensor_const_fold_opt__203_zero_point : [1]usize = [_]usize{ 96} ;
const array_const_fold_opt__203_zero_point : [96]i8 linksection(".rodata") = [_]i8{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0} ;
pub const tensor_const_fold_opt__203_zero_point = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__203_zero_point, &shape_tensor_const_fold_opt__203_zero_point);

 // ----------- Initializing tensor_model_1_block_4_add_add_zero_point;

const shape_tensor_model_1_block_4_add_add_zero_point : [1]usize = [_]usize{ 1} ;
const array_model_1_block_4_add_add_zero_point : [1]u8 linksection(".rodata") = [_]u8{ 129} ;
pub const tensor_model_1_block_4_add_add_zero_point = Tensor(u8).fromConstBuffer(&allocator, &array_model_1_block_4_add_add_zero_point, &shape_tensor_model_1_block_4_add_add_zero_point);

 // ----------- Initializing tensor_const_fold_opt__181_scale;

const shape_tensor_const_fold_opt__181_scale : [1]usize = [_]usize{ 48} ;
const array_const_fold_opt__181_scale : [48]f32 linksection(".rodata") = [_]f32{ 4.6371548e-3, 4.1458374e-3, 2.7640418e-3, 3.4635437e-3, 6.5713155e-4, 2.8551912e-3, 5.4663676e-3, 2.4670425e-3, 3.0879877e-3, 6.1968407e-3, 3.3956266e-3, 3.0709535e-3, 2.4317822e-3, 3.5668802e-3, 2.7069894e-3, 3.0468856e-3, 2.2712452e-3, 7.8023813e-4, 2.3347116e-3, 3.680245e-3, 4.0446315e-3, 2.0061692e-3, 4.8343004e-3, 3.5502699e-3, 5.1614963e-3, 7.531561e-3, 3.3648377e-3, 1.0941789e-2, 2.229517e-3, 6.266292e-4, 3.9435946e-3, 8.03593e-3, 4.1918834e-3, 3.616388e-3, 2.822275e-3, 3.6565564e-3, 5.47908e-3, 6.403337e-3, 3.8472007e-3, 4.568345e-3, 3.266225e-3, 3.1539553e-3, 3.3388666e-3, 4.944878e-3, 4.702559e-3, 2.1749479e-3, 2.6969332e-3, 3.2543151e-3} ;
pub const tensor_const_fold_opt__181_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__181_scale, &shape_tensor_const_fold_opt__181_scale);

 // ----------- Initializing tensor_model_1_conv1_relu_relu6_model_1_bn_conv1_fusedbatchnormv3_model_1_expanded_conv_depthwise_bn_fusedbatchnormv3_model_1_expanded_conv_depthwise_depthwise_model_1_block_5_project_conv2d_model_1_conv1_conv2d__40_0_scale;

const shape_tensor_model_1_conv1_relu_relu6_model_1_bn_conv1_fusedbatchnormv3_model_1_expanded_conv_depthwise_bn_fusedbatchnormv3_model_1_expanded_conv_depthwise_depthwise_model_1_block_5_project_conv2d_model_1_conv1_conv2d__40_0_scale : [1]usize = [_]usize{ 1} ;
const array_model_1_conv1_relu_relu6_model_1_bn_conv1_fusedbatchnormv3_model_1_expanded_conv_depthwise_bn_fusedbatchnormv3_model_1_expanded_conv_depthwise_depthwise_model_1_block_5_project_conv2d_model_1_conv1_conv2d__40_0_scale : [1]f32 linksection(".rodata") = [_]f32{ 3.921569e-3} ;
pub const tensor_model_1_conv1_relu_relu6_model_1_bn_conv1_fusedbatchnormv3_model_1_expanded_conv_depthwise_bn_fusedbatchnormv3_model_1_expanded_conv_depthwise_depthwise_model_1_block_5_project_conv2d_model_1_conv1_conv2d__40_0_scale = Tensor(f32).fromConstBuffer(&allocator, &array_model_1_conv1_relu_relu6_model_1_bn_conv1_fusedbatchnormv3_model_1_expanded_conv_depthwise_bn_fusedbatchnormv3_model_1_expanded_conv_depthwise_depthwise_model_1_block_5_project_conv2d_model_1_conv1_conv2d__40_0_scale, &shape_tensor_model_1_conv1_relu_relu6_model_1_bn_conv1_fusedbatchnormv3_model_1_expanded_conv_depthwise_bn_fusedbatchnormv3_model_1_expanded_conv_depthwise_depthwise_model_1_block_5_project_conv2d_model_1_conv1_conv2d__40_0_scale);

 // ----------- Initializing tensor_const_fold_opt__180_quantized;

const shape_tensor_const_fold_opt__180_quantized : [4]usize = [_]usize{ 48, 3, 3, 1} ;
const array_const_fold_opt__180_quantized : [432]i8 linksection(".rodata") = [_]i8{ -95, -120, -67, -94, -127, -92, -39, -54, -21, 72, 104, 68, 95, 127, 73, 48, 78, 34, -127, -51, 25, -65, -97, -72, -13, -84, -72, 90, 104, 33, 105, 127, 32, 62, 78, 20, -116, -62, -13, -90, -127, -64, -55, -86, -71, 61, 97, 75, 108, 127, 65, 52, 36, 15, -62, -40, -22, -127, -120, -50, -103, -120, -76, 114, 127, 46, 89, 106, 36, 116, 51, 42, -81, -127, -77, -99, -90, -67, -36, -15, -27, -58, -87, -42, -95, -127, -50, -44, -51, -27, 77, 98, 51, 77, 127, 68, 23, 58, 28, -94, -118, -44, -103, -127, -61, -37, -53, -27, 79, 112, 68, 82, 127, 72, 43, 86, 60, -127, -127, -81, -107, -119, -73, -70, -89, -39, -69, -70, -53, -118, -127, -83, -51, -65, -33, -49, -79, -9, -78, -127, -13, -30, -41, 7, 74, 97, 44, 109, 127, 72, 61, 73, 48, 89, 122, 48, 107, 127, 61, 38, 54, 22, 89, 127, 70, -55, -66, -35, -90, -115, -84, -111, -127, -55, -100, -110, -28, -38, -18, -1, 82, 99, 45, 104, 127, 46, 30, 25, 14, -103, -108, -57, -127, -99, -53, -49, -22, 12, 98, 109, 25, 118, 127, 43, 51, 40, 10, -100, -127, -51, -72, -95, -40, -21, -41, -18, -76, -111, -31, -96, -127, -46, -48, -89, -12, -53, -89, -31, -83, -127, -44, -47, -64, -34, 74, 91, 31, 95, 127, 55, 48, 63, 35, 110, 98, 19, 123, 127, 38, 23, 48, 23, -105, 40, 110, -127, 27, 116, -87, 20, 91, -55, -63, -40, -99, -127, -63, -46, -57, -16, -109, -127, -79, -111, -118, -89, -47, -76, -10, 113, 104, 95, 106, 127, 63, 70, 97, 41, 51, 69, 35, 87, 127, 51, 55, 76, 21, -91, -127, -79, 59, 73, 33, 88, 115, 69, 69, 103, 51, 89, 127, 57, 71, 78, 31, -110, -122, -56, -111, -127, -82, -107, -108, -73, -67, -88, -43, -98, -127, -32, -47, -57, 4, -121, -99, -53, -127, -114, -49, -73, -40, -34, 83, 108, 54, 106, 127, 63, 36, 36, 27, -71, -86, -83, -75, -115, -70, -117, -127, -63, -6, -68, -84, -118, -119, -23, -127, -80, -6, -72, 101, -52, -96, 127, -84, -29, 73, -33, 77, 90, 57, 106, 127, 55, 44, 69, 28, -83, -64, -31, -89, -78, -34, -99, -127, -48, 100, -46, -86, 127, -66, -110, 77, -35, -58, 64, 106, 48, 69, 127, 69, 36, 68, 50, -47, -53, -35, -115, -127, -42, -81, -84, -34, -51, -75, -50, -90, -127, -68, -50, -74, -43} ;
pub const tensor_const_fold_opt__180_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__180_quantized, &shape_tensor_const_fold_opt__180_quantized);

 // ----------- Initializing tensor_const_fold_opt__164_quantized;

const shape_tensor_const_fold_opt__164_quantized : [4]usize = [_]usize{ 96, 3, 3, 1} ;
const array_const_fold_opt__164_quantized : [864]i8 linksection(".rodata") = [_]i8{ -85, -61, -47, -121, 67, -127, -46, -34, -23, -6, 23, 4, 8, 127, -15, -29, -53, 18, 10, 61, 12, 55, 127, 63, -5, 35, 16, -9, -99, 28, -80, 127, -103, 6, -105, 14, 82, -41, 65, 44, -127, 16, 39, -47, 37, 8, 15, 5, 83, -127, 44, 4, 0, -7, 28, 127, 44, -43, 127, -78, -9, 24, -18, -20, -49, -32, -17, -45, 4, 24, 127, 19, -15, -3, -24, -18, 127, -48, -26, -69, -27, -9, -8, 19, -23, 127, -10, 3, 75, 8, -11, -36, -17, -12, -54, 2, 44, 127, 17, -44, 24, 7, -54, -62, 127, -49, -10, 57, -71, -110, -44, -117, -71, -127, 124, -33, 103, 3, 1, -1, 22, 127, 16, 0, 34, 6, -4, -78, -9, 30, -13, 26, 3, 127, 4, 33, 106, 9, 123, 101, 127, -34, 59, -37, -26, -17, -17, -26, 127, -30, -10, -9, -11, 0, 68, -8, 39, -127, 53, -8, -33, 14, -35, 58, 3, 80, 127, 108, -59, 102, 14, -20, -26, -22, 19, 127, 14, -21, -38, -17, -6, -13, -13, 19, 127, 5, -21, -21, -22, 35, 127, 8, -8, -65, -16, -3, -34, -9, 18, 127, 40, 95, 97, 82, -34, 107, -3, 29, 105, 16, -33, -127, -30, -35, -6, -21, 3, 22, -13, 51, -127, 37, 17, 24, -11, -18, 2, -12, 4, -127, -3, -21, 21, -16, -23, 52, 17, 94, 127, 67, 16, 63, -13, -1, 39, -12, 28, 127, 17, 3, 7, 5, 27, 127, 9, -1, -99, -8, 18, 17, 17, 6, 29, 10, 12, 127, 8, 1, 13, 7, 9, 127, 0, -16, 2, 3, -35, -64, -39, 5, -37, 8, -20, 127, -17, 17, -45, 10, -8, -107, 32, -127, -38, -74, -21, 1, 16, -2, -16, 5, -14, 127, -26, -10, -39, -1, -54, -124, -51, 48, 127, 74, 19, -101, -7, -2, -33, 61, 3, -81, 127, -13, -2, 13, -8, -36, -12, -20, 127, -9, -16, -109, -18, -56, -112, -57, -67, 52, -90, -34, -127, -21, -43, 127, -37, -67, 8, -76, -32, 18, -39, 15, -19, -5, -127, -28, -89, 7, -87, 4, -15, -50, -22, -26, 127, -40, -37, -29, -49, -6, -127, -19, 10, 18, -16, -4, -124, -11, 45, 16, 37, 97, -127, 37, 14, -48, -2, -47, -41, -33, -38, -101, -58, 2, 127, -18, -30, 57, -11, -96, 127, -76, 21, 19, 32, 39, -29, -24, 127, -14, -64, 20, -25, -8, -94, -26, -77, -91, 127, -67, -49, -40, -49, -30, -17, -41, -90, 106, -127, -13, -12, 1, 4, 61, -20, 73, 127, 28, -31, 26, -39, 13, -11, 7, 54, -127, 63, -5, -21, -3, 8, 40, 16, 23, 127, 6, -8, 4, 2, 58, 127, 30, -39, -95, -31, -11, 3, -13, -75, -99, -1, -127, 116, 119, -20, 62, -7, -14, 1, -58, 109, 127, 5, 24, 80, 6, 49, -68, 9, 76, -127, 94, 35, -45, 24, -22, -6, -20, -39, 127, -50, -22, -38, -23, -3, -89, 57, 25, -127, 94, 5, -63, 66, -15, -3, -15, -41, 127, -37, -25, -55, -16, 4, -10, 2, 36, -127, 50, 4, 44, 14, -33, 11, -41, -21, 127, -62, -28, -77, -38, 0, -14, 1, 15, -113, 0, -10, 127, -5, -33, -127, -22, -24, 115, -27, 19, 49, 24, -10, -118, -68, 76, 91, -127, -5, 93, -2, -32, -9, 3, -72, -127, -20, 5, 21, 6, -33, -80, -53, -21, 127, -57, -15, -71, -21, -28, -2, -43, 8, 127, -22, -25, -45, -27, -60, -16, 127, -40, -24, -56, 107, -26, -20, -53, -89, -35, -65, 127, -66, 22, -70, 8, -21, 5, -11, -18, -105, -22, 27, 127, 28, 25, 15, 23, -4, -127, 4, 19, 26, 13, 52, -119, 34, -110, -30, -127, -17, -120, -36, -7, 89, 4, -1, -127, -2, -8, 7, -11, 20, -127, -1, 90, -5, 29, 51, 72, -5, 0, -15, -1, 127, 113, -89, 1, -39, -54, 10, -1, -5, 11, 127, -9, -5, 32, -5, -11, -27, 19, -74, 75, 127, -44, -37, -2, -33, -98, -27, -127, 21, -96, -33, -2, -35, 16, -38, 41, -46, -127, -21, 46, -27, 51, 127, -9, -48, -48, 86, -57, -19, -1, 73, -16, -105, -14, -53, -127, 13, 23, 65, 59, -114, -127, -61, -46, 79, -112, -33, -103, -22, 31, 22, 13, 7, 127, -17, 25, -15, 8, -97, 21, -111, -11, 127, -92, -85, -77, -89, -35, -87, -13, -89, 127, -98, -21, -82, 16, 1, 125, 17, 52, 127, -10, 5, 47, -10, -30, 82, -32, 8, 78, 20, -14, -127, -7, -26, -105, -43, -115, -127, -108, 93, 24, 68, 23, 44, -25, 69, 127, 40, -9, 8, -4, -23, -127, -51, -69, -67, -53, -43, -75, -16, -24, -6, -44, 127, 60, -79, 28, -2, -15, -5, 21, -19, 89, 8, 127, -9, 66, 6, -39, -17, 41, -88, -5, 127, -31, -1, 35, -4, 7, 4, 127, -94, -45, -17, 12, -2, 28, 127, 33, -2, -20, -10, -20, -84, -9, -13, -56, -24, -59, -127, -69, -25, -22, -10, -1, -92, -1, -10, -30, -14, -6, 127, -15} ;
pub const tensor_const_fold_opt__164_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__164_quantized, &shape_tensor_const_fold_opt__164_quantized);

 // ----------- Initializing tensor_model_1_block_1_expand_bn_fusedbatchnormv3_quantized;

const shape_tensor_model_1_block_1_expand_bn_fusedbatchnormv3_quantized : [1]usize = [_]usize{ 48} ;
const array_model_1_block_1_expand_bn_fusedbatchnormv3_quantized : [48]i32 linksection(".rodata") = [_]i32{ 872, -507, -483, 997, 14015, 2130, -285, 3158, 1291, 992, 47, 2599, 1017, 405, -785, 445, 3035, 10893, 2800, -629, 965, -1004, -28, 2044, -278, -622, 1343, -38, 3573, 14230, 1714, -86, 435, -220, 2276, -5, 349, -236, 1061, 1232, 1378, 1902, 253, -244, 484, 2123, 1087, -238} ;
pub const tensor_model_1_block_1_expand_bn_fusedbatchnormv3_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_model_1_block_1_expand_bn_fusedbatchnormv3_quantized, &shape_tensor_model_1_block_1_expand_bn_fusedbatchnormv3_quantized);

 // ----------- Initializing tensor_model_1_block_3_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_3_project_conv2d_quantized;

const shape_tensor_model_1_block_3_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_3_project_conv2d_quantized : [1]usize = [_]usize{ 16} ;
const array_model_1_block_3_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_3_project_conv2d_quantized : [16]i32 linksection(".rodata") = [_]i32{ -6618, 10051, -20299, -527, 7369, -14902, -37619, -9437, -5616, 4774, -17887, -11618, 5905, -11951, -3892, 978} ;
pub const tensor_model_1_block_3_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_3_project_conv2d_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_model_1_block_3_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_3_project_conv2d_quantized, &shape_tensor_model_1_block_3_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_3_project_conv2d_quantized);

 // ----------- Initializing tensor_const_fold_opt__202_scale;

const shape_tensor_const_fold_opt__202_scale : [1]usize = [_]usize{ 16} ;
const array_const_fold_opt__202_scale : [16]f32 linksection(".rodata") = [_]f32{ 1.6134841e-3, 3.249372e-3, 3.048408e-3, 3.223595e-3, 3.234134e-3, 3.7981642e-3, 2.1377502e-3, 2.8569011e-3, 4.1199676e-3, 2.7660693e-3, 2.9375108e-3, 3.4780921e-3, 2.7880084e-3, 2.7072271e-3, 3.3087214e-3, 3.0889355e-3} ;
pub const tensor_const_fold_opt__202_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__202_scale, &shape_tensor_const_fold_opt__202_scale);

 // ----------- Initializing tensor_const_fold_opt__180_scale;

const shape_tensor_const_fold_opt__180_scale : [1]usize = [_]usize{ 48} ;
const array_const_fold_opt__180_scale : [48]f32 linksection(".rodata") = [_]f32{ 2.9886595e-3, 3.5099117e-3, 2.8865582e-3, 4.022085e-3, 3.4852754e-3, 3.001048e-3, 1.750807e-3, 1.1147949e-2, 3.4032175e-3, 2.0163928e-3, 2.1599736e-3, 3.4668355e-3, 2.8314271e-3, 3.6710063e-3, 1.4007221e-3, 4.1107642e-3, 2.828638e-3, 2.397904e-3, 5.576804e-3, 1.7034642e-3, 3.032658e-3, 2.6567525e-3, 3.666332e-3, 4.9884957e-3, 2.6239657e-3, 3.2534928e-3, 2.5827966e-3, 1.8753816e-3, 8.237388e-3, 4.7856737e-3, 2.2507263e-3, 8.87616e-3, 4.205428e-3, 6.194935e-3, 2.5110438e-3, 2.03283e-3, 3.8052897e-3, 2.2137598e-3, 3.105271e-3, 2.9983718e-3, 2.3034816e-3, 8.6612515e-3, 6.9066724e-3, 3.5706065e-3, 6.3269376e-3, 2.3695682e-3, 1.8405946e-3, 2.2281378e-3} ;
pub const tensor_const_fold_opt__180_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__180_scale, &shape_tensor_const_fold_opt__180_scale);

 // ----------- Initializing tensor_model_1_block_1_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_block_1_project_conv2d1_scale;

const shape_tensor_model_1_block_1_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_block_1_project_conv2d1_scale : [1]usize = [_]usize{ 1} ;
const array_model_1_block_1_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_block_1_project_conv2d1_scale : [1]f32 linksection(".rodata") = [_]f32{ 8.137604e-2} ;
pub const tensor_model_1_block_1_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_block_1_project_conv2d1_scale = Tensor(f32).fromConstBuffer(&allocator, &array_model_1_block_1_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_block_1_project_conv2d1_scale, &shape_tensor_model_1_block_1_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_block_1_project_conv2d1_scale);

 // ----------- Initializing tensor_const_fold_opt__162_quantized;

const shape_tensor_const_fold_opt__162_quantized : [4]usize = [_]usize{ 48, 1, 1, 8} ;
const array_const_fold_opt__162_quantized : [384]i8 linksection(".rodata") = [_]i8{ 66, 34, 127, -26, 69, 99, -81, -48, 9, -81, -127, 20, 55, 21, 27, 7, -127, -1, -53, -19, 46, 24, -75, -42, 53, 74, 106, -83, 0, -127, 3, -12, -127, 21, -52, -26, 57, 10, -36, -45, -81, 19, -48, -4, 5, 34, -68, -127, -32, -127, -124, 49, 111, 6, 3, 43, -71, -127, -108, -82, -73, -85, 21, 102, 89, 39, -5, -2, 100, -82, -127, 17, -32, 63, -56, 98, -70, -44, 127, -29, -23, 127, 34, 61, 113, -16, -13, 58, -73, -47, -32, -12, -85, 105, 127, -12, 67, 32, -127, 35, -13, -37, -63, -10, 66, -35, -71, 10, 23, -127, -21, -26, 8, -70, 82, 7, 127, -122, -61, 29, -34, -43, -4, 127, 66, 84, -73, 26, 109, 37, -36, 28, 70, -116, -127, -25, 55, 127, 49, 76, 47, 64, 21, -80, 29, -6, -8, -8, 127, -1, 37, -10, 15, 127, 26, 21, -126, 17, 27, -34, -42, 25, 56, -127, 5, 37, -25, 106, -36, 70, 30, -127, 31, 38, -7, 107, -63, -90, -101, 9, -125, 127, 113, -39, 105, 54, -127, 28, 20, -70, -82, -22, -49, 46, 11, -5, -21, 74, -127, 90, -101, -58, -127, 9, -50, -79, 71, 100, 42, -8, -32, -20, 117, -8, 127, -35, 127, -67, 21, 90, -4, 25, -17, 73, 67, 73, 32, -2, 127, -103, 63, -45, -9, -19, -35, -38, -73, 22, 127, -41, 44, -127, -56, -70, -110, -5, 5, -68, 9, 25, -10, -7, -127, -7, -23, -15, 39, -57, -58, 99, -9, -87, 111, -127, 52, 127, 44, 32, 42, -4, -51, -12, -125, -35, 127, -10, -9, 105, 103, 15, -32, 57, 127, -23, -62, -54, -27, 24, -110, 16, 106, -14, -6, 127, 76, 39, -8, -85, -6, -127, -57, -70, 62, 34, 48, -12, 83, -58, 58, 49, -127, 9, -7, 90, -127, -48, -26, 7, 8, 75, 71, -56, 15, 38, 14, 5, 9, 127, -50, 103, 127, 5, 26, 83, -70, 21, 57, -108, -86, -21, -127, 12, -4, -76, -9, -82, 26, -69, 127, -43, 6, 36, 4, 127, 122, 28, 11, 60, -94, 17, -38, 54, 13, 91, -121, 74, -127, 23, -45, -34, 68, 49, -127, -112, -30, 4, -23, 60, 33, -108, -127, 45, -24, 60} ;
pub const tensor_const_fold_opt__162_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__162_quantized, &shape_tensor_const_fold_opt__162_quantized);

 // ----------- Initializing tensor_model_1_expanded_conv_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_expanded_conv_project_conv2d1_zero_point;

const shape_tensor_model_1_expanded_conv_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_expanded_conv_project_conv2d1_zero_point : [1]usize = [_]usize{ 1} ;
const array_model_1_expanded_conv_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_expanded_conv_project_conv2d1_zero_point : [1]u8 linksection(".rodata") = [_]u8{ 139} ;
pub const tensor_model_1_expanded_conv_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_expanded_conv_project_conv2d1_zero_point = Tensor(u8).fromConstBuffer(&allocator, &array_model_1_expanded_conv_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_expanded_conv_project_conv2d1_zero_point, &shape_tensor_model_1_expanded_conv_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_expanded_conv_project_conv2d1_zero_point);

 // ----------- Initializing tensor_const_fold_opt__184_quantized;

const shape_tensor_const_fold_opt__184_quantized : [4]usize = [_]usize{ 48, 3, 3, 1} ;
const array_const_fold_opt__184_quantized : [432]i8 linksection(".rodata") = [_]i8{ 18, -127, -8, -10, 105, 31, -6, 42, -1, -48, -106, -11, -19, -127, 25, 33, -12, 24, 10, -19, 13, -27, 127, -40, 8, -33, 5, 11, 127, 9, 5, 6, -6, -33, -37, -29, -21, -70, -18, 33, 127, -46, 6, 39, -7, -104, 59, 23, -110, 65, 127, -69, 28, 7, -50, -100, 27, 113, -78, -127, -25, 103, -23, 43, 127, 65, -93, -75, 85, -13, -99, -33, -37, 20, -1, -9, 40, 111, 3, 127, -30, 7, 5, -44, 23, 127, -73, 11, -23, -19, -18, -5, -10, 16, 127, 9, 4, 4, -9, 9, 0, 8, 37, -127, 71, 1, 9, 9, 39, 47, -21, 127, -102, -33, -25, -84, 18, -5, 19, 8, 19, 127, 19, -7, -17, -3, -7, 1, 9, 6, 127, 24, 12, -6, 7, 5, -41, 4, -30, 127, -65, 2, -65, 15, 105, -44, -66, -34, 127, 8, -67, -22, 52, -4, 57, 19, -39, 127, 6, -12, 72, 15, 18, 22, -72, 24, 127, -116, 8, 26, -18, 12, 13, -22, 57, 127, 20, -28, 33, -10, -8, 4, -6, 58, 127, 19, -1, 12, -8, -22, 127, -34, -68, 116, -117, -18, 47, -18, -74, 10, 127, 31, -4, -37, 83, -23, -52, 29, 127, 27, 20, 9, 0, -7, -31, -14, -11, 127, -43, -56, 118, 67, -93, -55, 21, -14, -33, -1, 127, -100, -14, 5, 54, -30, -14, -65, -2, -82, -127, -22, 41, 84, 22, -25, 31, -2, -13, 127, 115, -16, -6, -24, -44, 64, 14, 127, 41, -64, 15, -79, -12, 72, -124, 40, -99, 127, -35, -4, 14, 2, 2, 8, 26, 47, 127, 29, 2, -32, -14, -107, -103, -4, -127, -7, -53, 40, -26, 3, 80, 103, -7, -33, -127, -36, -1, -9, 44, -14, -9, -9, 7, 127, 23, -5, -1, -10, -43, -27, -16, -68, 127, 105, -49, -31, -13, -56, -127, 69, 16, 126, -28, 32, 6, -50, -7, 25, 11, 14, -127, 43, -2, 49, -4, -36, 13, 14, -58, 127, 3, -6, -20, 10, -6, -62, 8, -56, -127, -11, 6, -5, 22, -19, -44, 56, 3, -108, -97, 45, 127, 11, -11, -122, 31, 127, 46, 118, -15, -108, 0, 56, -8, -19, 127, 41, 9, -12, -3, -3, 11, -84, 30, 5, -127, 29, 3, -17, -1, -6, -108, -34, -127, -32, 30, -6, 44, 5, -16, 34, -6, -71, 127, -61, -23, 35, -20, 56, 45, 48, -59, -127, 99, 17, 52, 18, 127, 43, -27, -4, -22, 102, -26, -6, 58, -11, 120, -10, 95, 88, -73, 12, -127, -53} ;
pub const tensor_const_fold_opt__184_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__184_quantized, &shape_tensor_const_fold_opt__184_quantized);

 // ----------- Initializing tensor_const_fold_opt__171_zero_point;

const shape_tensor_const_fold_opt__171_zero_point : [1]usize = [_]usize{ 3} ;
const array_const_fold_opt__171_zero_point : [3]i8 linksection(".rodata") = [_]i8{ 0, 0, 0} ;
pub const tensor_const_fold_opt__171_zero_point = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__171_zero_point, &shape_tensor_const_fold_opt__171_zero_point);

 // ----------- Initializing tensor_const_fold_opt__159_quantized;

const shape_tensor_const_fold_opt__159_quantized : [4]usize = [_]usize{ 16, 3, 3, 1} ;
const array_const_fold_opt__159_quantized : [144]i8 linksection(".rodata") = [_]i8{ -85, -109, -30, 66, -36, 17, 32, 127, 20, 105, -95, -11, -127, 104, 23, 14, -2, -13, -24, -3, -48, 36, 95, 127, -13, -95, -80, 121, 127, 59, 3, -20, -14, -100, -126, -43, 18, -59, -5, 20, -127, -2, 14, -84, -18, -64, 27, -2, -127, 34, 4, -78, 29, 2, -15, 80, 127, -50, 56, -16, -36, -51, -88, 37, 24, -17, 127, 71, -3, 36, 7, -17, -21, -31, 52, -54, -87, 127, -26, -62, 96, -22, 45, -10, -14, 127, -11, -5, 87, -7, 24, 87, 12, -37, -127, -30, 12, 39, 17, 7, -19, 10, 65, -93, 35, -85, 127, -46, -41, 50, -9, -127, 115, 6, -78, 80, 6, 67, 9, -19, 114, 104, -8, 80, 127, 53, -30, -28, 48, 44, 98, -127, -16, -70, 81, -101, -33, 18, -127, -117, 22, -34, -85, -10} ;
pub const tensor_const_fold_opt__159_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__159_quantized, &shape_tensor_const_fold_opt__159_quantized);

 // ----------- Initializing tensor_model_1_block_2_add_add_zero_point;

const shape_tensor_model_1_block_2_add_add_zero_point : [1]usize = [_]usize{ 1} ;
const array_model_1_block_2_add_add_zero_point : [1]u8 linksection(".rodata") = [_]u8{ 101} ;
pub const tensor_model_1_block_2_add_add_zero_point = Tensor(u8).fromConstBuffer(&allocator, &array_model_1_block_2_add_add_zero_point, &shape_tensor_model_1_block_2_add_add_zero_point);

 // ----------- Initializing tensor_const_fold_opt__201_quantized;

const shape_tensor_const_fold_opt__201_quantized : [4]usize = [_]usize{ 96, 3, 3, 1} ;
const array_const_fold_opt__201_quantized : [864]i8 linksection(".rodata") = [_]i8{ 64, -48, 24, 125, -127, 58, 37, -77, 6, 124, -45, -127, -22, 6, -13, -109, 45, 106, 12, 11, 9, 69, -39, 127, 71, 120, 64, 28, 65, 18, 127, 122, 97, -5, -2, -17, -41, -19, -14, -8, -98, 2, 8, 127, 8, 5, 85, -10, -47, -127, -23, 10, 71, -7, 42, -35, -1, 102, -127, 24, 20, -25, -2, 47, 3, 43, 51, -127, 48, 86, 31, 49, 81, 70, 73, -10, 68, -22, -20, -127, 21, -77, 9, 20, -127, 0, 82, -66, -14, 26, -92, -127, -49, -92, -33, -75, -10, -72, 5, 56, 55, 9, 127, 47, 67, -29, -5, -3, -16, -26, -21, -5, -77, -13, 15, 127, -1, -35, -42, 20, -127, -107, -27, -11, -19, -11, 33, -88, 18, -55, -31, -127, 8, -62, 18, -28, 86, -80, 53, 127, 59, 51, 29, 42, -98, -105, -46, -52, -127, 26, -8, -14, -7, 23, 77, 14, -57, -127, -28, 19, 58, 5, -6, 35, 13, 103, 127, 65, 6, 9, 21, 36, 106, 38, 19, 127, -14, 34, -29, 20, 34, 127, 32, -100, 19, -106, 0, -15, -17, 72, 14, 35, 8, -127, 4, 46, 13, 45, 40, 83, 22, -127, -103, -98, 5, 43, -14, 89, 127, 83, -68, 80, -68, -30, 50, -34, 10, 30, 26, -16, -127, 4, 11, 50, -2, -6, 8, -30, 58, 127, 40, 37, -62, 46, -60, 9, 16, -127, 20, 114, -7, -10, 13, 28, 72, 47, 127, 87, -19, 27, 70, 64, 2, 11, 15, -81, -86, 127, -15, 13, 12, 15, 127, 22, 73, -23, 99, 22, 98, 27, 24, 5, 13, 127, -100, 36, 12, 3, 1, -32, -127, -77, 51, 50, -99, 9, 18, -71, -39, 65, -34, 5, -127, -23, -17, -38, -20, 14, 86, -71, 64, 85, -127, -4, 36, -33, -31, 12, -28, 11, 127, -22, -28, 31, -26, 89, 31, 42, 127, -34, 107, 75, 34, 31, 4, 78, -11, -118, 27, -127, 58, 73, 16, 82, 104, 20, 25, 62, -27, 66, 127, -20, -15, -20, -1, -25, 127, -39, 16, 46, 13, -9, -127, 48, -115, -98, -31, -63, -125, 5, 18, 127, -9, 44, -47, 7, -13, -30, -5, -39, -21, 30, -127, 34, 93, 35, 13, 3, -5, 101, -22, 16, 25, 13, -22, -127, -4, 45, 127, 37, 65, 25, 77, -83, -50, -51, -127, -70, -91, -91, -8, -9, -22, -78, -61, 8, -30, 7, -67, -127, -50, -106, -18, -72, 2, 127, -2, -8, -68, -10, -14, -7, -4, -32, -79, -9, -127, -102, -70, -7, -42, -2, -7, -15, 42, -127, -8, 127, -44, -26, 23, -116, -127, -94, -95, -97, -83, 32, -50, 48, -17, -113, 12, -126, -47, -127, -1, 10, -4, 2, -20, -7, 25, 127, 2, 26, 99, -18, 22, 16, 10, 127, 1, 53, -1, 84, 7, 55, 127, 9, -37, 70, -51, 9, -31, -8, -39, -23, -6, 51, 59, -127, -70, -55, -8, -13, -127, -11, -4, -34, 43, -17, -80, 19, -55, 11, 90, -127, 10, 93, -10, -21, -30, -82, 30, -106, -4, 17, -18, -2, 127, -17, -49, -127, -8, -55, 76, -103, 21, -13, 23, -125, -61, -87, 39, -19, 100, 94, 22, 127, -127, -55, -75, -84, -39, -18, -59, 58, -34, -9, -124, 24, -54, -11, -50, -10, -127, 6, -88, -20, -53, -21, -127, 0, 78, 96, 41, 10, 106, -5, 51, 127, 47, -5, 50, -29, -31, -33, 61, -85, 18, 127, -32, -36, 47, 48, 71, 25, -17, -127, -39, 45, 27, 10, -11, 33, -51, 82, 127, -5, -34, -39, -43, -19, -51, -25, -72, 127, -31, -30, -20, 9, -18, -6, -11, -41, 7, -62, 41, 127, 23, 62, 127, 29, 35, 29, 9, 43, -3, 24, 32, 127, 23, -54, -108, -29, 10, -3, 24, 2, -1, 28, -127, -95, -45, 58, 90, 63, -35, -81, -12, -127, -37, -95, -11, -68, 11, 5, 21, -38, 66, 42, -127, 30, 33, -14, 31, -38, 2, 127, -102, 6, 7, -23, -16, 19, -87, 29, -100, -127, -39, -8, -65, -8, -12, 32, -9, 120, 127, -6, -29, 15, -36, -33, -62, -15, 67, 127, -21, -30, -90, -8, -127, -72, -86, -112, 124, -121, -24, -19, -45, 15, 127, 1, -48, -69, -42, -14, -32, -10, 21, 10, 27, 127, -86, -68, 15, -3, -7, -80, -59, -64, -112, -29, -127, -12, -49, -87, 57, 127, 38, -14, -67, -3, -13, -2, -16, -13, -59, 5, 103, 63, 127, -29, -73, 0, -110, -106, -28, -54, -127, -125, -67, -60, -67, -44, -8, -42, -22, -69, 6, 57, 127, 36, 1, 127, 10, -15, 95, -4, -37, 39, -36, 16, 44, -48, 116, 127, -13, -62, -79, -68, -127, 74, -92, -5, 113, -32, -94, 76, -90, 18, 82, 9, 7, 81, 2, 71, 127, 76, -102, -109, -51, -51, -127, 4, -22, 32, -2, 48, 6, 29, 54, -127, 47, 51, 30, 38, 75, 127, 40, -9, -122, 1, -17, -45, 5, -3, -25, 41, -82, -52, 127, 6, -12, 7, 87, 127, 54, 68, 64, 18, -1, -9, -4, -5, 12, -16, -22, 127, -25, -18, -1, -28} ;
pub const tensor_const_fold_opt__201_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__201_quantized, &shape_tensor_const_fold_opt__201_quantized);

 // ----------- Initializing tensor_model_1_block_4_add_add_scale;

const shape_tensor_model_1_block_4_add_add_scale : [1]usize = [_]usize{ 1} ;
const array_model_1_block_4_add_add_scale : [1]f32 linksection(".rodata") = [_]f32{ 6.1229903e-2} ;
pub const tensor_model_1_block_4_add_add_scale = Tensor(f32).fromConstBuffer(&allocator, &array_model_1_block_4_add_add_scale, &shape_tensor_model_1_block_4_add_add_scale);

 // ----------- Initializing tensor_const_fold_opt__181_zero_point;

const shape_tensor_const_fold_opt__181_zero_point : [1]usize = [_]usize{ 48} ;
const array_const_fold_opt__181_zero_point : [48]i8 linksection(".rodata") = [_]i8{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0} ;
pub const tensor_const_fold_opt__181_zero_point = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__181_zero_point, &shape_tensor_const_fold_opt__181_zero_point);

 // ----------- Initializing tensor_model_1_block_2_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d1_zero_point;

const shape_tensor_model_1_block_2_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d1_zero_point : [1]usize = [_]usize{ 1} ;
const array_model_1_block_2_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d1_zero_point : [1]u8 linksection(".rodata") = [_]u8{ 126} ;
pub const tensor_model_1_block_2_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d1_zero_point = Tensor(u8).fromConstBuffer(&allocator, &array_model_1_block_2_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d1_zero_point, &shape_tensor_model_1_block_2_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d1_zero_point);

 // ----------- Initializing tensor_model_1_block_5_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d1_zero_point;

const shape_tensor_model_1_block_5_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d1_zero_point : [1]usize = [_]usize{ 1} ;
const array_model_1_block_5_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d1_zero_point : [1]u8 linksection(".rodata") = [_]u8{ 148} ;
pub const tensor_model_1_block_5_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d1_zero_point = Tensor(u8).fromConstBuffer(&allocator, &array_model_1_block_5_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d1_zero_point, &shape_tensor_model_1_block_5_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d1_zero_point);

 // ----------- Initializing tensor_const_fold_opt__189_scale;

const shape_tensor_const_fold_opt__189_scale : [1]usize = [_]usize{ 16} ;
const array_const_fold_opt__189_scale : [16]f32 linksection(".rodata") = [_]f32{ 5.2901446e-3, 5.7357536e-3, 5.2411575e-3, 7.1154693e-3, 4.359607e-3, 6.2580314e-3, 4.359539e-3, 5.252992e-3, 3.7211988e-3, 3.6725928e-3, 7.807266e-3, 6.80902e-3, 4.6689804e-3, 3.6270893e-3, 6.333501e-3, 5.122482e-3} ;
pub const tensor_const_fold_opt__189_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__189_scale, &shape_tensor_const_fold_opt__189_scale);

 // ----------- Initializing tensor_const_fold_opt__202_quantized;

const shape_tensor_const_fold_opt__202_quantized : [4]usize = [_]usize{ 16, 1, 1, 96} ;
const array_const_fold_opt__202_quantized : [1536]i8 linksection(".rodata") = [_]i8{ -120, 45, 59, -27, -45, -35, -96, 3, -40, 1, 2, -23, 20, 55, 35, -49, 30, -1, 103, 5, 37, -53, 127, 72, 41, 15, -1, 34, -56, -111, -103, -18, -48, -42, 32, 57, -3, 36, -16, 42, -28, -3, -117, 44, -66, -33, 8, 118, -22, 12, -74, -28, -40, -9, 21, -49, -108, 9, -26, 93, 49, 10, 11, -2, -31, -74, -72, 31, -46, -42, 30, 2, -4, -11, -91, -63, -62, 35, -63, 26, -53, 95, 99, -94, 7, 71, 11, 49, 31, -33, 6, -9, -43, -51, -71, 9, 34, 28, 6, -48, -68, -52, -14, 6, -34, 13, 48, -63, -9, -4, -78, -47, -4, -4, -79, 12, -22, -79, 10, 57, -14, -60, -10, -41, 56, -110, 102, -70, 57, 29, -16, 38, 51, 39, -10, -43, 12, 20, 5, -22, 1, 60, -127, -63, -64, -56, 0, -25, 55, -62, -16, 41, 8, -6, -19, 12, 40, 69, 5, -103, -20, -25, -54, 8, 24, -45, -83, -15, -61, -21, 16, -73, 23, 13, 43, -82, -31, -42, -88, -42, 37, -65, -28, 9, -75, -17, -77, 28, 15, 63, -63, 48, 83, -32, -8, 17, 50, -95, 47, 12, 21, -22, -4, -4, -78, -27, -15, -52, -89, -53, -58, 26, 23, -59, -47, 42, -6, -66, -3, -3, -47, 66, -50, 109, -49, 116, -37, 43, -6, 2, -23, -2, -127, 82, 68, 59, -57, -11, -27, -12, 32, 12, -42, -66, 41, -32, -27, 74, 58, -9, 35, 7, -6, 42, -4, 17, 70, 16, -34, 12, 63, 52, -34, 31, 40, 34, 56, 34, 37, -72, 63, 57, 104, -10, -42, 5, -60, 66, -2, 38, 14, 29, -44, 46, -63, 46, -33, 25, 7, -13, -31, 4, 43, -11, -2, -52, 2, 60, 58, 62, 15, -5, -68, 31, 12, -27, 20, -3, 30, 127, 33, -46, 10, 22, -27, 9, 78, -25, 61, -25, -26, 30, -33, 0, 2, 71, 28, 12, -91, -34, -57, 54, -32, 40, 23, 4, -18, -53, -19, -35, 31, -87, -38, -45, 34, 93, -36, 5, -11, -22, -26, 1, 45, 47, -67, 2, -5, 23, 16, -54, -31, -45, 29, -18, 2, 4, -46, -11, -14, 7, -50, 0, -1, -16, 20, -41, -3, 21, 31, -5, 43, 23, -38, 47, 26, 6, -27, 6, 27, 36, -47, 25, -34, 78, 112, -5, 2, -3, 0, -45, -7, -9, -29, 63, 41, -48, 57, 74, -68, 7, -127, 23, -26, -46, 30, 12, -63, -53, 3, 72, -16, 48, 26, 18, -49, -38, 25, -12, -15, 19, -21, 61, -33, 60, -6, 13, 31, -23, -75, 24, 59, -14, 9, -9, 46, -14, 15, 8, -30, 15, -53, 10, -45, 47, -45, 50, 39, -54, -34, -53, 12, -45, -12, 31, -33, 89, -58, 9, -25, 41, 38, -54, 35, -2, 20, 30, -69, -35, 25, 16, -88, 28, 63, -12, 9, 1, 75, -61, -48, 46, -18, -40, 42, -28, 2, -31, -4, -45, 60, 38, -127, -11, -77, 17, -41, -12, 51, -1, 37, -78, -16, 51, 52, 105, -3, 3, -10, -3, 51, -27, -10, 82, 90, -78, -13, 78, 46, -5, -6, 14, -23, 43, 26, -22, 30, -103, 19, -58, -47, -80, 75, 89, -69, -25, 60, -40, -51, -72, -81, -33, -64, -28, -8, 13, -32, -41, 20, -41, -29, -30, 86, -34, 20, -63, -84, -5, 24, -4, -44, 31, 32, -19, -7, 46, 12, 99, 27, -26, -64, 34, -73, -86, 90, 101, -79, 53, -4, 66, -92, -61, 68, 54, -22, -39, 9, 22, -19, -31, -57, -61, -34, 52, 60, 20, 28, 17, 84, -43, 34, 13, 16, -118, 1, -27, 45, 68, 13, -1, -59, -49, -7, -48, -86, 16, 21, -92, -15, 63, 68, 16, -6, -76, 55, 29, 18, 3, -74, 63, -101, -11, 0, 21, 6, 65, 12, 8, -23, -79, -37, 28, 84, 45, 68, -44, 64, -89, -28, -57, -70, 86, 9, -48, 38, 12, -37, 76, 44, 38, -32, 6, -25, 127, 37, 78, -59, -59, 2, -22, 12, 20, -32, 22, -48, -48, -47, 11, -5, -18, -56, -35, -46, 47, 7, 120, 18, 45, -9, -4, 13, 41, 54, 51, 82, -31, 54, 37, -25, 30, 14, 12, -4, 33, -76, -19, 7, -26, 31, -61, 69, -29, 41, -71, -84, -33, -47, 3, -5, -18, 42, 11, -99, 21, -28, 127, 41, -16, -5, 4, -40, 30, -23, -4, -89, 50, 20, 54, -40, 52, -45, 55, 2, -60, -9, -43, 58, -88, 53, 17, -21, -6, -13, 97, -93, 44, 50, -41, -56, 1, -5, 97, -67, 33, -40, -26, -80, 27, -97, -23, 15, -3, -42, 31, 18, 86, 3, -54, 5, 6, 30, -12, 4, 4, -43, 68, 4, 46, -25, -13, -46, -22, -20, -53, -39, -63, -33, 24, 54, 11, -15, -24, 18, 20, -31, -42, 7, -14, -13, -18, 67, 70, 10, -35, -70, 100, -33, 34, -4, -49, -31, 24, 16, 63, -31, -67, -42, 6, -42, 3, 3, 23, -35, -44, -123, -18, -39, 14, -62, -32, -29, -3, -37, -49, -7, -6, 23, 13, 16, 72, -74, -7, -98, -127, 10, -57, -21, 14, -86, 57, 0, -49, 71, 59, 1, 51, -16, 102, -50, -19, 15, 127, 26, 15, 69, 0, 32, 20, 44, -111, -50, 7, 21, -9, 26, -8, 50, 52, -33, -4, 7, -99, 1, -1, -27, -10, -30, 28, 41, -6, -17, 12, 14, 25, 32, 76, 11, -23, -91, -85, 14, 3, 20, 0, 89, -13, -89, 46, -47, -38, 105, -16, -39, -2, -49, 38, 66, 56, -4, 98, -22, -18, -44, 42, -72, 7, 60, -24, 75, -8, 40, -20, -8, -45, -64, 14, 7, 16, 75, 28, -52, -14, 71, 9, -63, -4, -48, -29, 63, -8, -9, -21, -12, -6, -78, -15, -5, -12, -61, -43, 14, 17, 27, 23, 23, 15, -37, 78, 35, 2, -41, -59, -33, -9, 71, -37, 30, 11, 72, -88, 86, 127, 10, -41, 9, -1, -11, -91, -14, 54, 39, 80, -44, -40, -7, 13, 7, 53, 20, -63, 53, 29, 3, 61, -58, -16, 4, -51, 21, 57, 8, -27, -18, 50, 95, 37, 16, -80, 35, -51, 52, -16, -46, 27, 29, 5, -38, -26, 9, 38, -38, -11, 32, 51, 33, 62, -45, -3, -47, -30, 14, -49, 40, -26, -38, -41, 63, -36, 6, -3, -19, 1, 2, -2, -48, -12, 39, -11, -34, 14, -54, -61, 1, -2, -45, 39, 19, -25, 21, -33, 17, -4, 10, 7, -63, 33, -88, 5, -65, 61, -38, 66, 23, 11, -6, -22, 22, -35, -59, -28, -14, 16, 47, -42, -2, -52, 6, -44, -30, -58, 6, -99, 7, -67, 26, 69, 127, 24, 77, 12, -25, -27, 51, -32, 61, 35, 8, 50, 23, 2, -22, 54, 72, 0, -18, -26, -47, -73, -15, 33, 42, 29, 40, 50, 42, -27, 9, -32, 52, 109, -9, 38, 59, 58, 2, 54, 15, 41, 19, 8, -63, 49, 16, 32, 127, 4, 54, -79, 29, 16, -70, -78, -10, 63, 6, -5, 30, -12, 14, -23, 34, 16, -26, -39, 28, -26, 39, 66, 4, 43, 3, -2, -67, 14, -7, 11, -38, -14, 6, 23, -31, 67, 3, 57, 15, -103, 18, -94, -9, 71, -15, -43, 3, -18, 63, 11, -1, 13, -3, 46, -20, 52, -78, -13, -14, 29, 102, 31, -6, 79, -28, -59, 59, 3, -60, 56, 80, 9, -5, -92, -8, 19, -16, -38, 2, -21, 2, -25, 43, -40, -21, -62, 55, -98, -50, -87, -16, -22, -86, -15, -75, -37, 13, 93, -30, 2, 95, -6, 26, -30, 66, 42, 27, -5, -116, 127, -61, -33, 27, -59, 103, 6, -2, 60, -3, -85, 53, -26, 64, -14, -62, 2, 7, -1, 1, 68, 85, -50, -42, 6, 39, 29, 24, -95, 0, 31, -49, 32, -41, -23, -70, 9, -65, 30, -43, -82, -115, 27, 28, 89, -9, 70, 42, -81, 64, 60, 39, -30, -22, -18, -1, 38, -62, 14, -17, -2, -9, 34, -118, -27, 123, 86, -119, -9, 68, -60, 80, -6, 6, -22, -62, -96, -71, 44, 31, 127, 16, -42, -1, 35, -7, 37, -35, 96, -3, -19, -47, 9, 67, 6, -40, 19, 1, 88, 94, 15, 65, -1, 22, 29, -2, -66, 61, -50, 28, -15, -20, -37, 49, 23, -45, 21, 27, 68, -112, -11, -29, -74, -14, -113, 3, -55, -63, 9, -67, 68, -6, 48, -5, -50, -36, -33, 56, -32, -56, -28, 40, 10, -9, -26, -17, 85, -21, -39, -20, 102, 74, 11, 4, -51, -35, -68, -90, -48, 61, -44, 26, -2, -19, -81, -7, 26, -21, 63, 3, -24, 33, 82, -107, -15, 12, -66, 11, -42, -10, -102, 52, -3, 39, -67, -51, -99, -37, 31, -41, 41, 72, -121, -19, -46, 27, -35, -9, -13, 58, -40, -4, 15, 49, 101, -62, -14, 21, -59, -51, 61, 15, -48, -93, -35, 84, 22, -15, 10, -95, 15, -76, -3, 16, 5, 47, -74, 75, -17, 63, -32, -33, -47, -5, 14, 49, -2, -40, 72, 50, 49, 20, -14, -127, 11, -19, -51, -82, 26, 46, -25, -22, 64} ;
pub const tensor_const_fold_opt__202_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__202_quantized, &shape_tensor_const_fold_opt__202_quantized);

 // ----------- Initializing tensor_model_1_block_5_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d1_scale;

const shape_tensor_model_1_block_5_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d1_scale : [1]usize = [_]usize{ 1} ;
const array_model_1_block_5_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d1_scale : [1]f32 linksection(".rodata") = [_]f32{ 5.3547166e-2} ;
pub const tensor_model_1_block_5_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d1_scale = Tensor(f32).fromConstBuffer(&allocator, &array_model_1_block_5_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d1_scale, &shape_tensor_model_1_block_5_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d1_scale);

 // ----------- Initializing tensor_relu__37_0_scale;

const shape_tensor_relu__37_0_scale : [1]usize = [_]usize{ 1} ;
const array_relu__37_0_scale : [1]f32 linksection(".rodata") = [_]f32{ 4.1024506e-2} ;
pub const tensor_relu__37_0_scale = Tensor(f32).fromConstBuffer(&allocator, &array_relu__37_0_scale, &shape_tensor_relu__37_0_scale);

 // ----------- Initializing tensor_new_shape__154;

const shape_tensor_new_shape__154 : [1]usize = [_]usize{ 4} ;
const array_new_shape__154 : [4]i64 linksection(".rodata") = [_]i64{ 1, 1, 96, 96} ;
pub const tensor_new_shape__154 = Tensor(i64).fromConstBuffer(&allocator, &array_new_shape__154, &shape_tensor_new_shape__154);

 // ----------- Initializing tensor_const_fold_opt__159_scale;

const shape_tensor_const_fold_opt__159_scale : [1]usize = [_]usize{ 16} ;
const array_const_fold_opt__159_scale : [16]f32 linksection(".rodata") = [_]f32{ 5.679945e-2, 3.0061746e-1, 7.616299e-2, 4.507411e-2, 5.2436627e-3, 8.100781e-3, 4.1147407e-2, 6.2380848e-3, 3.6020912e-2, 7.934764e-3, 1.3640054e-1, 2.6318586e-1, 8.4999755e-2, 3.6393886e-3, 2.3590769e-1, 7.7159065e-3} ;
pub const tensor_const_fold_opt__159_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__159_scale, &shape_tensor_const_fold_opt__159_scale);

 // ----------- Initializing tensor_model_1_block_4_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_4_project_conv2d_quantized;

const shape_tensor_model_1_block_4_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_4_project_conv2d_quantized : [1]usize = [_]usize{ 16} ;
const array_model_1_block_4_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_4_project_conv2d_quantized : [16]i32 linksection(".rodata") = [_]i32{ -28729, -573, -1842, -16393, 13617, -7234, 24023, -10450, 10104, -10828, 13860, 10224, -6757, -30125, -8229, 9185} ;
pub const tensor_model_1_block_4_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_4_project_conv2d_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_model_1_block_4_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_4_project_conv2d_quantized, &shape_tensor_model_1_block_4_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_4_project_conv2d_quantized);

 // ----------- Initializing tensor_const_fold_opt__194_zero_point;

const shape_tensor_const_fold_opt__194_zero_point : [1]usize = [_]usize{ 32} ;
const array_const_fold_opt__194_zero_point : [32]i8 linksection(".rodata") = [_]i8{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0} ;
pub const tensor_const_fold_opt__194_zero_point = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__194_zero_point, &shape_tensor_const_fold_opt__194_zero_point);

 // ----------- Initializing tensor_model_1_block_4_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_4_project_conv2d1_zero_point;

const shape_tensor_model_1_block_4_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_4_project_conv2d1_zero_point : [1]usize = [_]usize{ 1} ;
const array_model_1_block_4_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_4_project_conv2d1_zero_point : [1]u8 linksection(".rodata") = [_]u8{ 127} ;
pub const tensor_model_1_block_4_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_4_project_conv2d1_zero_point = Tensor(u8).fromConstBuffer(&allocator, &array_model_1_block_4_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_4_project_conv2d1_zero_point, &shape_tensor_model_1_block_4_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_4_project_conv2d1_zero_point);

 // ----------- Initializing tensor_const_fold_opt__173_quantized;

const shape_tensor_const_fold_opt__173_quantized : [4]usize = [_]usize{ 48, 1, 1, 8} ;
const array_const_fold_opt__173_quantized : [384]i8 linksection(".rodata") = [_]i8{ 62, 127, -90, -83, 16, 72, 12, 65, 63, -68, 38, -127, -53, 61, -83, -40, -30, 127, 110, 44, 107, 10, 49, 13, 100, 35, -99, 48, -20, -87, -127, -38, -31, 34, 20, -64, -38, 110, 127, 49, 12, 79, -127, -71, 39, 76, 26, -16, -9, 127, 68, 57, 63, -4, 11, -76, 127, -26, -49, 23, 38, 5, 117, -5, 55, 121, 79, 94, 127, 72, 108, -104, 62, 99, -127, -85, 13, 97, 5, 68, -70, -51, 28, -49, -14, -26, -41, 127, 18, -110, -127, -25, 19, -5, 34, -20, -28, -96, -120, -25, -127, 25, -82, 46, -17, 16, -95, 105, -127, -27, -12, -10, -60, -36, -127, 2, 26, -4, -18, -43, 22, -109, -127, 10, -102, -21, -30, -12, 127, -64, -13, 57, -76, 24, 29, 99, -24, 111, 127, -35, -40, -18, -32, -24, -1, -127, 49, 79, -13, -82, 44, -99, 127, -44, -61, 38, -97, 2, 31, 88, -26, -127, 73, 66, -15, -92, -1, -76, 5, -55, -21, -28, 127, -10, 37, 16, -127, 10, -74, 49, 61, 43, -88, -116, -103, -34, 87, 17, -121, 127, 109, -35, -26, 60, 5, -46, -58, 127, 101, -1, -59, -110, -127, -60, -47, -24, -22, -36, -9, 61, -41, 127, -126, 35, -95, 2, 25, -127, 26, 69, 22, -52, 3, -123, 17, 127, 80, 50, 127, -30, 35, -71, 118, 32, -37, -15, 67, -127, -103, 32, 21, -14, 27, -127, 29, -21, 20, -25, 46, -38, 9, 64, -17, 27, 11, 127, -61, -74, -13, -75, -48, 127, 45, 62, -34, 45, 47, -29, 44, 127, -111, 76, 43, 127, -76, -50, 26, 53, -61, 74, 25, -127, 33, 47, -29, -77, 41, -94, -15, -36, -80, -15, -127, -44, -17, 2, -53, -127, 63, 74, -45, -89, -12, -53, -83, 37, 83, -67, -127, -90, -59, 95, 76, -127, 57, 37, -15, -77, -10, -84, 6, 56, 11, 52, -127, -17, -62, 17, 116, 123, -91, -127, 53, 4, -17, 10, -15, -39, -14, 16, 127, 12, 47, 23, 127, 26, 85, 17, -76, -41, 58, 120, 81, 43, -26, 24, 71, -125, -127, 14, 53, 10, 14, 11, 80, -127, -8, -53, 67, -48, -16, 127, 58, 66, 26, 77, -74, -62, 60, 67, -42, 31, 127, -65} ;
pub const tensor_const_fold_opt__173_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__173_quantized, &shape_tensor_const_fold_opt__173_quantized);

 // ----------- Initializing tensor_const_fold_opt__184_scale;

const shape_tensor_const_fold_opt__184_scale : [1]usize = [_]usize{ 48} ;
const array_const_fold_opt__184_scale : [48]f32 linksection(".rodata") = [_]f32{ 1.3673025e-2, 5.6841085e-3, 3.2485995e-2, 1.101664e-2, 9.160303e-3, 1.453975e-2, 8.364883e-3, 1.32254185e-2, 4.2681727e-3, 1.4421828e-2, 1.0891515e-2, 9.242e-2, 2.0345949e-2, 2.9738579e-2, 1.2239045e-2, 3.1770803e-2, 8.908502e-3, 3.2961904e-3, 1.1773755e-2, 1.1918878e-2, 1.2215109e-2, 1.18345255e-2, 3.7550766e-3, 1.8580457e-2, 7.7549564e-3, 1.8142167e-2, 1.8763062e-2, 1.0477637e-2, 1.1368172e-2, 2.3099495e-2, 5.7435874e-3, 4.048756e-3, 6.3250028e-3, 8.723502e-3, 7.0592826e-3, 2.0348165e-2, 1.3028853e-1, 1.477935e-2, 5.3860457e-3, 1.01291165e-2, 8.374604e-3, 6.287449e-3, 1.1850187e-2, 8.135099e-3, 1.746917e-2, 4.0555396e-3, 2.589003e-3, 7.1275e-3} ;
pub const tensor_const_fold_opt__184_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__184_scale, &shape_tensor_const_fold_opt__184_scale);

 // ----------- Initializing tensor_model_1_block_2_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d1_scale;

const shape_tensor_model_1_block_2_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d1_scale : [1]usize = [_]usize{ 1} ;
const array_model_1_block_2_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d1_scale : [1]f32 linksection(".rodata") = [_]f32{ 6.495699e-2} ;
pub const tensor_model_1_block_2_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d1_scale = Tensor(f32).fromConstBuffer(&allocator, &array_model_1_block_2_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d1_scale, &shape_tensor_model_1_block_2_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d1_scale);

 // ----------- Initializing tensor_model_1_block_5_add_add_scale;

const shape_tensor_model_1_block_5_add_add_scale : [1]usize = [_]usize{ 1} ;
const array_model_1_block_5_add_add_scale : [1]f32 linksection(".rodata") = [_]f32{ 8.247893e-2} ;
pub const tensor_model_1_block_5_add_add_scale = Tensor(f32).fromConstBuffer(&allocator, &array_model_1_block_5_add_add_scale, &shape_tensor_model_1_block_5_add_add_scale);

 // ----------- Initializing tensor_const_fold_opt__181_quantized;

const shape_tensor_const_fold_opt__181_quantized : [4]usize = [_]usize{ 48, 1, 1, 8} ;
const array_const_fold_opt__181_quantized : [384]i8 linksection(".rodata") = [_]i8{ -40, 27, -8, -10, -75, -28, -127, 37, 80, -69, -52, -48, 127, -92, 81, 31, -103, 124, -51, -127, 64, -13, -22, 47, 42, 25, 81, 17, 85, 127, 120, -1, -78, -125, 78, 5, -45, -127, -2, -47, 127, -31, 83, 67, -76, -5, 4, -27, 26, 39, 127, -30, 42, -39, -43, 25, 26, 8, -127, -34, -37, 91, 88, -69, 6, 127, -38, 28, 64, 110, 63, 58, -2, 127, -64, 96, 3, -106, 43, 113, 1, -127, -7, -23, -85, -118, -57, -73, -127, -72, 108, 50, 0, -74, 102, 57, -26, 51, -127, 81, 45, -55, -60, 88, 103, -127, 100, 92, 19, 41, 38, -60, -35, 115, -59, -124, -29, -127, -30, -66, 35, 106, 37, -24, 34, -66, 104, -127, -113, -127, -58, 87, -55, 25, -6, 69, -35, -113, -127, 88, -55, 88, -48, 90, -103, -72, -48, 94, -14, 86, 5, 127, 62, -127, 103, -112, 8, -55, 35, -33, -10, 80, 40, 6, 51, 127, 74, 1, 30, 113, 46, -33, 38, -61, 92, -127, 24, 17, 109, 15, -8, 127, 38, -39, -102, -70, 45, -67, 87, 101, -60, -127, -99, -90, 36, -94, 117, 114, -47, -127, 127, 7, -64, -19, 18, 34, -63, -5, -127, -32, -127, -26, -49, -40, 27, -15, 78, 31, 0, -66, -127, -21, 88, 90, -127, -82, -2, 43, -63, -117, 3, 0, 127, 95, 50, -112, 7, 16, -62, -96, -88, -66, 39, -71, 66, 78, -46, -127, 45, 44, -11, 127, 4, -68, 3, 17, -13, 127, 7, 36, 33, 75, -3, 42, -43, 127, -87, 36, 17, -34, -34, 6, -127, -112, -44, 100, -21, 25, 22, 100, -53, 127, -32, -1, 66, 106, 63, 73, 68, 21, 2, -52, -127, -39, 85, 98, -69, 118, 27, 26, -127, 111, -27, -95, 31, 26, 25, 20, 118, 79, 127, 53, -20, -75, 43, -22, 16, 52, -91, 127, -79, -51, -71, 127, -28, 9, 7, 80, 127, 20, 57, 111, -45, -13, 1, -22, -41, 7, -66, -127, 57, -102, -2, 87, 20, -9, 76, -5, 31, 127, 91, 6, -27, -30, -66, 127, 49, 11, -47, -45, 70, 118, 116, -115, 51, -65, 26, -127, -34, -127, -42, 38, -6, 41, -65, 125, 43, 46, 115, 24, 99, 127, 122, -14} ;
pub const tensor_const_fold_opt__181_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__181_quantized, &shape_tensor_const_fold_opt__181_quantized);

 // ----------- Initializing tensor_relu6__30_0_scale;

const shape_tensor_relu6__30_0_scale : [1]usize = [_]usize{ 1} ;
const array_relu6__30_0_scale : [1]f32 linksection(".rodata") = [_]f32{ 2.2416076e-2} ;
pub const tensor_relu6__30_0_scale = Tensor(f32).fromConstBuffer(&allocator, &array_relu6__30_0_scale, &shape_tensor_relu6__30_0_scale);

 // ----------- Initializing tensor_const_fold_opt__203_scale;

const shape_tensor_const_fold_opt__203_scale : [1]usize = [_]usize{ 96} ;
const array_const_fold_opt__203_scale : [96]f32 linksection(".rodata") = [_]f32{ 4.4846036e-3, 1.9356854e-3, 3.8847628e-3, 3.5209933e-3, 3.5785409e-3, 1.3440921e-3, 3.8872806e-3, 2.1487274e-3, 1.6620514e-3, 2.6058187e-3, 1.8909038e-3, 2.7223586e-3, 3.1198345e-3, 6.6430937e-3, 2.9967814e-3, 3.060973e-3, 5.6802505e-3, 2.6814279e-3, 2.8373993e-3, 1.5084074e-3, 4.6025207e-3, 1.2221395e-3, 3.3662391e-3, 2.25669e-3, 1.987407e-3, 3.150038e-3, 3.7449626e-3, 3.784415e-3, 3.415507e-3, 3.97266e-3, 4.8023053e-3, 2.5131768e-3, 4.019467e-3, 1.1874535e-3, 2.121518e-3, 4.080753e-3, 1.9663044e-3, 3.9735567e-3, 2.0683445e-3, 4.7663054e-3, 8.5082924e-4, 3.3633239e-3, 2.8070859e-3, 2.405678e-3, 1.9625414e-3, 2.2646764e-3, 1.9399974e-3, 2.0027095e-3, 4.1533825e-3, 3.7872356e-3, 3.98101e-3, 1.7727974e-3, 3.1501225e-3, 2.6335737e-3, 2.2774893e-3, 5.611604e-3, 3.0972972e-3, 1.4736741e-3, 2.256451e-3, 3.0480453e-3, 2.761393e-3, 1.8097347e-3, 3.3604875e-3, 5.2088723e-3, 7.722311e-4, 1.361168e-3, 3.9797225e-3, 3.3401297e-3, 1.2415117e-3, 2.3722672e-3, 3.0633316e-3, 2.400811e-3, 2.225808e-3, 2.379642e-3, 4.871184e-3, 3.879964e-3, 3.953164e-3, 1.3916229e-3, 2.8293317e-3, 3.0823755e-3, 2.0859437e-3, 2.929905e-3, 2.438711e-3, 1.0801746e-3, 3.3671623e-3, 1.9939244e-3, 2.8812953e-3, 3.998128e-3, 4.0260376e-3, 4.4267047e-3, 2.8052346e-3, 1.3951878e-3, 3.0887942e-3, 2.4800154e-3, 2.9169244e-3, 2.1161046e-3} ;
pub const tensor_const_fold_opt__203_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__203_scale, &shape_tensor_const_fold_opt__203_scale);

 // ----------- Initializing tensor_model_1_block_6_expand_bn_fusedbatchnormv3_quantized;

const shape_tensor_model_1_block_6_expand_bn_fusedbatchnormv3_quantized : [1]usize = [_]usize{ 96} ;
const array_model_1_block_6_expand_bn_fusedbatchnormv3_quantized : [96]i32 linksection(".rodata") = [_]i32{ 1547, -76, 3265, 4955, 4771, -1875, 4453, -1131, -2611, -625, 3833, -2248, 2492, 6012, 1752, 1265, -317, -427, -1780, 4977, 2869, -451, 2624, -375, -811, 3635, 1794, 1294, 7449, 2753, 4628, 964, 1293, 4112, 5042, 3891, -209, 2097, 2453, -5337, -323, 1564, -98, 2439, -530, 1141, -1179, 1324, -6264, 1951, 1485, -4520, 6853, -1512, 2195, 1434, 1489, 2518, -252, -1644, 750, 1665, 748, 5033, 6784, 2303, 2037, 5786, 3645, -121, 4517, 6657, 3108, -995, 7794, 6926, 1090, -3857, 1016, 1182, 11048, 2035, -53, -2009, 1693, 1100, 1819, -1748, 3092, 77, 4129, 2413, -137, -2412, 170, 1376} ;
pub const tensor_model_1_block_6_expand_bn_fusedbatchnormv3_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_model_1_block_6_expand_bn_fusedbatchnormv3_quantized, &shape_tensor_model_1_block_6_expand_bn_fusedbatchnormv3_quantized);

 // ----------- Initializing tensor_relu6__5_0_scale;

const shape_tensor_relu6__5_0_scale : [1]usize = [_]usize{ 1} ;
const array_relu6__5_0_scale : [1]f32 linksection(".rodata") = [_]f32{ 2.3529412e-2} ;
pub const tensor_relu6__5_0_scale = Tensor(f32).fromConstBuffer(&allocator, &array_relu6__5_0_scale, &shape_tensor_relu6__5_0_scale);

 // ----------- Initializing tensor_model_1_block_4_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_4_project_conv2d1_scale;

const shape_tensor_model_1_block_4_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_4_project_conv2d1_scale : [1]usize = [_]usize{ 1} ;
const array_model_1_block_4_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_4_project_conv2d1_scale : [1]f32 linksection(".rodata") = [_]f32{ 4.918215e-2} ;
pub const tensor_model_1_block_4_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_4_project_conv2d1_scale = Tensor(f32).fromConstBuffer(&allocator, &array_model_1_block_4_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_4_project_conv2d1_scale, &shape_tensor_model_1_block_4_project_bn_fusedbatchnormv3_model_1_block_5_project_conv2d_model_1_block_4_project_conv2d1_scale);

 // ----------- Initializing tensor_model_1_block_2_add_add_scale;

const shape_tensor_model_1_block_2_add_add_scale : [1]usize = [_]usize{ 1} ;
const array_model_1_block_2_add_add_scale : [1]f32 linksection(".rodata") = [_]f32{ 1.02499776e-1} ;
pub const tensor_model_1_block_2_add_add_scale = Tensor(f32).fromConstBuffer(&allocator, &array_model_1_block_2_add_add_scale, &shape_tensor_model_1_block_2_add_add_scale);

 // ----------- Initializing tensor_const_fold_opt__159_zero_point;

const shape_tensor_const_fold_opt__159_zero_point : [1]usize = [_]usize{ 16} ;
const array_const_fold_opt__159_zero_point : [16]i8 linksection(".rodata") = [_]i8{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0} ;
pub const tensor_const_fold_opt__159_zero_point = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__159_zero_point, &shape_tensor_const_fold_opt__159_zero_point);

 // ----------- Initializing tensor_model_1_bn_conv1_fusedbatchnormv3_quantized;

const shape_tensor_model_1_bn_conv1_fusedbatchnormv3_quantized : [1]usize = [_]usize{ 16} ;
const array_model_1_bn_conv1_fusedbatchnormv3_quantized : [16]i32 linksection(".rodata") = [_]i32{ 1736, 407, 770, -638, 75148, 51387, 2628, 4474, 6377, 7996, 1211, -11, 4915, -1753, 132, 47603} ;
pub const tensor_model_1_bn_conv1_fusedbatchnormv3_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_model_1_bn_conv1_fusedbatchnormv3_quantized, &shape_tensor_model_1_bn_conv1_fusedbatchnormv3_quantized);

 // ----------- Initializing tensor_model_1_expanded_conv_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_expanded_conv_project_conv2d1_scale;

const shape_tensor_model_1_expanded_conv_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_expanded_conv_project_conv2d1_scale : [1]usize = [_]usize{ 1} ;
const array_model_1_expanded_conv_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_expanded_conv_project_conv2d1_scale : [1]f32 linksection(".rodata") = [_]f32{ 1.11044705e-1} ;
pub const tensor_model_1_expanded_conv_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_expanded_conv_project_conv2d1_scale = Tensor(f32).fromConstBuffer(&allocator, &array_model_1_expanded_conv_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_expanded_conv_project_conv2d1_scale, &shape_tensor_model_1_expanded_conv_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_expanded_conv_project_conv2d1_scale);

 // ----------- Initializing tensor_const_fold_opt__171_scale;

const shape_tensor_const_fold_opt__171_scale : [1]usize = [_]usize{ 3} ;
const array_const_fold_opt__171_scale : [3]f32 linksection(".rodata") = [_]f32{ 4.739698e-3, 3.6849487e-3, 3.5249295e-3} ;
pub const tensor_const_fold_opt__171_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__171_scale, &shape_tensor_const_fold_opt__171_scale);

 // ----------- Initializing tensor_head_bias_quantized;

const shape_tensor_head_bias_quantized : [1]usize = [_]usize{ 32} ;
const array_head_bias_quantized : [32]i32 linksection(".rodata") = [_]i32{ -462, 1156, -463, -533, 2252, -628, 1181, -411, 1393, -602, 573, -301, -454, 1292, -541, -355, -650, 1260, 1275, 1167, -659, -501, 1670, -562, 1059, 1562, 1041, 1594, -914, 272, 1248, 751} ;
pub const tensor_head_bias_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_head_bias_quantized, &shape_tensor_head_bias_quantized);

 // ----------- Initializing tensor_model_1_head_relu_model_1_head_biasadd_model_1_head_conv2d_head_bias_scale;

const shape_tensor_model_1_head_relu_model_1_head_biasadd_model_1_head_conv2d_head_bias_scale : [1]usize = [_]usize{ 1} ;
const array_model_1_head_relu_model_1_head_biasadd_model_1_head_conv2d_head_bias_scale : [1]f32 linksection(".rodata") = [_]f32{ 6.897246e-2} ;
pub const tensor_model_1_head_relu_model_1_head_biasadd_model_1_head_conv2d_head_bias_scale = Tensor(f32).fromConstBuffer(&allocator, &array_model_1_head_relu_model_1_head_biasadd_model_1_head_conv2d_head_bias_scale, &shape_tensor_model_1_head_relu_model_1_head_biasadd_model_1_head_conv2d_head_bias_scale);

 // ----------- Initializing tensor_const_fold_opt__164_scale;

const shape_tensor_const_fold_opt__164_scale : [1]usize = [_]usize{ 96} ;
const array_const_fold_opt__164_scale : [96]f32 linksection(".rodata") = [_]f32{ 3.4298943e-3, 1.42029915e-2, 4.9386276e-3, 7.410932e-3, 9.484308e-3, 2.2235509e-2, 5.1124003e-3, 1.0242923e-2, 1.3093286e-2, 1.1065338e-2, 1.4060684e-2, 7.2025196e-3, 3.8105983e-3, 6.100396e-3, 8.068133e-3, 6.274851e-3, 1.4687441e-2, 1.7473148e-2, 5.297249e-3, 2.1828182e-2, 1.1663878e-2, 1.3515854e-2, 3.8879307e-3, 7.984532e-3, 1.561576e-1, 6.8388903e-3, 6.4621936e-3, 6.4134174e-3, 1.6084285e-2, 7.085365e-3, 1.0295678e-2, 1.7257381e-2, 3.6773337e-3, 2.634225e-2, 7.493813e-3, 8.94489e-3, 1.3635437e-2, 3.7350908e-3, 9.010572e-3, 5.173423e-3, 1.847337e-2, 7.5912587e-3, 1.2034863e-2, 5.6996015e-3, 7.5056744e-3, 1.2517122e-2, 6.611559e-3, 9.091807e-3, 6.5496666e-3, 1.2441817e-2, 8.660547e-3, 1.1035294e-2, 7.139164e-3, 9.134466e-3, 1.2164917e-2, 1.3600591e-2, 6.421992e-3, 1.7372401e-2, 2.4222802e-2, 8.176043e-3, 1.5749997e-2, 1.1793213e-2, 7.3492806e-3, 5.9824805e-3, 1.1526629e-2, 1.9583685e-2, 5.662279e-3, 5.367096e-3, 1.262838e-2, 2.0375045e-2, 5.2347826e-3, 1.20502515e-2, 1.60973e-2, 9.46932e-3, 7.996533e-3, 9.326924e-3, 3.1404651e-3, 1.0824926e-2, 6.4275987e-3, 6.743722e-3, 3.2490334e-3, 7.921234e-3, 4.393864e-3, 9.524454e-3, 4.2521274e-3, 1.6238667e-2, 4.9035065e-3, 8.966419e-3, 5.43072e-3, 9.366829e-3, 4.0609078e-3, 1.0270677e-2, 1.5177029e-2, 9.891572e-3, 4.030822e-3, 1.4585198e-2} ;
pub const tensor_const_fold_opt__164_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__164_scale, &shape_tensor_const_fold_opt__164_scale);

 // ----------- Initializing tensor_model_1_logits_biasadd_model_1_logits_conv2d_logits_bias1_scale;

const shape_tensor_model_1_logits_biasadd_model_1_logits_conv2d_logits_bias1_scale : [1]usize = [_]usize{ 1} ;
const array_model_1_logits_biasadd_model_1_logits_conv2d_logits_bias1_scale : [1]f32 linksection(".rodata") = [_]f32{ 1.394198e-1} ;
pub const tensor_model_1_logits_biasadd_model_1_logits_conv2d_logits_bias1_scale = Tensor(f32).fromConstBuffer(&allocator, &array_model_1_logits_biasadd_model_1_logits_conv2d_logits_bias1_scale, &shape_tensor_model_1_logits_biasadd_model_1_logits_conv2d_logits_bias1_scale);

 // ----------- Initializing tensor_const_fold_opt__193_quantized;

const shape_tensor_const_fold_opt__193_quantized : [4]usize = [_]usize{ 8, 1, 1, 16} ;
const array_const_fold_opt__193_quantized : [128]i8 linksection(".rodata") = [_]i8{ -15, -10, -14, -64, -24, -37, 20, -16, 32, 4, -25, -1, 106, 127, -13, -101, 127, -60, -46, 21, -51, 71, -73, -42, -43, 85, -33, -53, -10, 7, -59, -12, -34, -98, 37, 44, 48, -55, -85, -21, 31, -90, 28, -127, 46, -20, -78, 26, 37, 8, 10, 11, -15, 71, -52, -22, 127, 45, 8, 20, 0, -16, 6, 22, -90, -34, -27, -127, -2, 40, 48, -126, 34, -19, -47, -34, -117, 36, -38, -19, 85, 53, 72, -27, 47, -46, -122, -127, -18, -71, 63, 53, -57, 44, 65, -44, 98, 40, -127, -71, 24, -71, 2, -78, -42, 17, -121, 90, 87, -88, 7, 71, -127, -4, 102, -30, -66, 3, 1, -62, -51, 62, 83, -31, 62, -27, 29, 29} ;
pub const tensor_const_fold_opt__193_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__193_quantized, &shape_tensor_const_fold_opt__193_quantized);

 // ----------- Initializing tensor_const_fold_opt__194_scale;

const shape_tensor_const_fold_opt__194_scale : [1]usize = [_]usize{ 32} ;
const array_const_fold_opt__194_scale : [32]f32 linksection(".rodata") = [_]f32{ 1.8544116e-3, 2.129427e-3, 1.814419e-3, 2.199491e-3, 2.4543426e-3, 2.1379525e-3, 2.6299637e-3, 1.9009258e-3, 2.16115e-3, 2.0516196e-3, 2.1136487e-3, 1.924478e-3, 1.8575523e-3, 2.1148701e-3, 1.8179178e-3, 1.8093612e-3, 1.8181264e-3, 2.34382e-3, 2.5919664e-3, 2.0920245e-3, 1.96675e-3, 1.8136654e-3, 2.6183578e-3, 1.8764412e-3, 2.164972e-3, 2.3623013e-3, 2.1011608e-3, 2.3237613e-3, 2.073365e-3, 2.4055436e-3, 2.1935105e-3, 2.661062e-3} ;
pub const tensor_const_fold_opt__194_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__194_scale, &shape_tensor_const_fold_opt__194_scale);

 // ----------- Initializing tensor_model_1_block_3_expand_bn_fusedbatchnormv3_quantized;

const shape_tensor_model_1_block_3_expand_bn_fusedbatchnormv3_quantized : [1]usize = [_]usize{ 48} ;
const array_model_1_block_3_expand_bn_fusedbatchnormv3_quantized : [48]i32 linksection(".rodata") = [_]i32{ 1426, -823, 664, -1375, 3055, -467, 3277, -3428, 800, 714, 1615, 3742, 414, -486, 558, 4477, -1300, 2875, 4253, 973, -653, 2029, -526, 5671, 1472, 1429, 1195, -590, 7843, -253, 2362, -1884, -344, 2721, -647, 1287, 1799, 986, 222, 3850, 1359, 9373, -3062, 1331, 7792, -73, 2010, 2259} ;
pub const tensor_model_1_block_3_expand_bn_fusedbatchnormv3_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_model_1_block_3_expand_bn_fusedbatchnormv3_quantized, &shape_tensor_model_1_block_3_expand_bn_fusedbatchnormv3_quantized);

 // ----------- Initializing tensor_const_fold_opt__193_scale;

const shape_tensor_const_fold_opt__193_scale : [1]usize = [_]usize{ 8} ;
const array_const_fold_opt__193_scale : [8]f32 linksection(".rodata") = [_]f32{ 7.252284e-3, 9.136289e-3, 7.5381175e-3, 1.0656511e-2, 8.9871045e-3, 7.1658706e-3, 7.864615e-3, 1.1038357e-2} ;
pub const tensor_const_fold_opt__193_scale = Tensor(f32).fromConstBuffer(&allocator, &array_const_fold_opt__193_scale, &shape_tensor_const_fold_opt__193_scale);

 // ----------- Initializing tensor_model_1_expanded_conv_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_expanded_conv_project_conv2d_quantized;

const shape_tensor_model_1_expanded_conv_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_expanded_conv_project_conv2d_quantized : [1]usize = [_]usize{ 8} ;
const array_model_1_expanded_conv_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_expanded_conv_project_conv2d_quantized : [8]i32 linksection(".rodata") = [_]i32{ -7184, -2937, 11761, -9152, 22414, 7808, -8341, 11511} ;
pub const tensor_model_1_expanded_conv_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_expanded_conv_project_conv2d_quantized = Tensor(i32).fromConstBuffer(&allocator, &array_model_1_expanded_conv_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_expanded_conv_project_conv2d_quantized, &shape_tensor_model_1_expanded_conv_project_bn_fusedbatchnormv3_model_1_block_2_project_conv2d_model_1_expanded_conv_project_conv2d_quantized);

 // ----------- Initializing tensor_const_fold_opt__194_quantized;

const shape_tensor_const_fold_opt__194_quantized : [4]usize = [_]usize{ 32, 1, 1, 96} ;
const array_const_fold_opt__194_quantized : [3072]i8 linksection(".rodata") = [_]i8{} ;
pub const tensor_const_fold_opt__194_quantized = Tensor(i8).fromConstBuffer(&allocator, &array_const_fold_opt__194_quantized, &shape_tensor_const_fold_opt__194_quantized);

 // -----------------------------------------
 // +         Initializing constants        +
 // -----------------------------------------

 // no Constant Tensors are present;